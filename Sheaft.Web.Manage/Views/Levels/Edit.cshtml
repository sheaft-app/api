@model LevelViewModel
@{
    ViewData["Title"] = "Level details";
}

<div class="container">
    <h2 class="display-4 d-inline">Level details @(Model.RemovedOn.HasValue ? "(removed)":"")</h2>
    <div class="d-inline">
        @if (!Model.RemovedOn.HasValue)
        {
            @using (Html.BeginForm("Delete", "Levels", new { id = Model.Id }, FormMethod.Post, true, new { @class = "form d-inline" }))
            {
                <button type="submit" class="btn btn-danger">
                    <i class="fa fa-trash"></i>
                </button>
            }
        }
        else
        {
            @using (Html.BeginForm("Restore", "Levels", new { id = Model.Id }, FormMethod.Post, true, new { @class = "form d-inline" }))
            {
                <button type="submit" class="btn btn-info">
                    <i class="fa fa-trash-restore"></i>
                </button>
            }
        }
    </div>
    <div class="clearfix"></div>
    <br />

    @using (Html.BeginForm("Edit", "Levels", FormMethod.Post, new { @class = "form" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        <br />

        <div class="form-group">
            @Html.LabelFor(m => m.Name)
            @Html.TextBoxFor(m => m.Name, null, new { @class = "form-control" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.RequiredPoints)
            @Html.TextBoxFor(m => m.RequiredPoints, null, new { @class = "form-control" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.CreatedOn)
            @Html.TextBoxFor(m => m.CreatedOn, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.UpdatedOn)
            @Html.TextBoxFor(m => m.UpdatedOn, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        @if (Model.RemovedOn.HasValue)
        {
            <div class="form-group">
                @Html.LabelFor(m => m.RemovedOn)
                @Html.TextBoxFor(m => m.RemovedOn, null, new { @class = "form-control", @disabled = "disabled" })
            </div>
        }

        <h4>Rewards</h4>

        <table class="table table-hover">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Contact</th>
                    <th scope="col">Email</th>
                    <th scope="col">Department</th>
                    <th scope="col">Url</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var reward in Model.Rewards)
                {
                    <tr>
                        <th scope="row">@reward.Name</th>
                        <td>@reward.Contact</td>
                        <td>@reward.Email</td>
                        <td>@reward.DepartmentName</td>
                        <td>@reward.Url</td>
                        <td>
                            <a asp-controller="Rewards" asp-action="Edit" asp-route-id="@reward.Id" class="btn btn-info">
                                <i class="fa fa-pen"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <br />
        <a asp-controller="Levels" asp-action="Index" class="btn btn-light">
            Cancel
        </a>
        <button type="submit" class="btn btn-success">
            <i class="fa fa-check">&nbsp;Save</i>
        </button>
    }

</div>
