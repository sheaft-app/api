@using Sheaft.Domain.Enum
@using Sheaft.Domain.Extensions
@model PickingViewModel
@{
    ViewData["Title"] = "Picking details";
}
<div class="container">
    <h2 class="display-4 d-inline">Picking details</h2>
    <div class="clearfix"></div>
    <br/>
    @using (Html.BeginForm("GeneratePickingForm", "Pickings", new {id = Model.Id}, FormMethod.Post, true, new {@class = "form d-inline"}))
    {
        <button type="submit" class="btn btn-info">
            <i class="fa fa-print"></i> Form
        </button>
    }
    @if (Model.Status == PickingStatus.Waiting || Model.Status == PickingStatus.Paused)
    {
@using (Html.BeginForm("Start", "Pickings", new {id = Model.Id}, FormMethod.Post, true, new {@class = "form d-inline"}))
{
    <button type="submit" class="btn btn-info">
        <i class="fa fa-arrow-alt-circle-right"></i> Start
    </button>
}
    }
    @if (Model.Status == PickingStatus.InProgress)
    {
@using (Html.BeginForm("Pause", "Pickings", new {id = Model.Id}, FormMethod.Post, true, new {@class = "form d-inline"}))
{
    <button type="submit" class="btn btn-info">
        <i class="fa fa-arrow-alt-circle-right"></i> Pause
    </button>
}
@using (Html.BeginForm("Complete", "Pickings", new {id = Model.Id}, FormMethod.Post, true, new {@class = "form d-inline"}))
{
    <button type="submit" class="btn btn-info">
        <i class="fa fa-arrow-alt-circle-right"></i> Complete
    </button>
}
    }
    <br/>
    @using (Html.BeginForm("Edit", "Pickings", FormMethod.Post, new {@class = "form"}))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        @Html.HiddenFor(model => model.Id)
        <br/>

        <div class="form-group">
            @Html.LabelFor(m => m.Status)
            @Html.TextBoxFor(m => m.Status, null, new {@class = "form-control", @disabled = "disabled"})
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Producer.Name)
            @Html.TextBoxFor(m => m.Producer.Name, null, new {@class = "form-control", @disabled = "disabled"})
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.CreatedOn)
            @Html.TextBoxFor(m => m.CreatedOn, null, new {@class = "form-control", @disabled = "disabled"})
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.UpdatedOn)
            @Html.TextBoxFor(m => m.UpdatedOn, null, new {@class = "form-control", @disabled = "disabled"})
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.StartedOn)
            @Html.TextBoxFor(m => m.StartedOn, null, new {@class = "form-control", @disabled = "disabled"})
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.CompletedOn)
            @Html.TextBoxFor(m => m.CompletedOn, null, new {@class = "form-control", @disabled = "disabled"})
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.PickingFormUrl)
            @Html.TextBoxFor(m => m.PickingFormUrl, null, new {@class = "form-control", @disabled = "disabled"})
        </div>
        <br/>
        <h2>PurchaseOrders</h2>
        <table class="table table-striped table-dark">
            <thead>
            <tr>
                <td>Reference</td>
                <td>CreatedOn</td>
                <td>Status</td>
                <td>ExpectedDeliveryOn</td>
                <td>ProductsCount</td>
                <td>TotalWholeSalePrice</td>
                <td></td>
            </tr>
            </thead>
            <tbody>
            @if (Model.PurchaseOrders.Any())
            {
                @foreach (var purchaseOrder in Model.PurchaseOrders)
                {
                    <tr>
                        <td>@purchaseOrder.Reference.AsPurchaseOrderIdentifier()</td>
                        <td>@purchaseOrder.CreatedOn</td>
                        <td>@purchaseOrder.Status</td>
                        <td>@purchaseOrder.ExpectedDelivery.ExpectedDeliveryDate</td>
                        <td>@purchaseOrder.ProductsCount</td>
                        <td>@purchaseOrder.TotalWholeSalePrice</td>
                        <td>
                            <a asp-controller="PurchaseOrders" asp-action="Edit" asp-route-id="@purchaseOrder.Id" class="btn btn-light">
                                <i class="fa fa-eye"></i>
                            </a>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
        <br/>
        <h2>Products to prepare</h2>
        <table class="table table-striped table-dark">
            <thead>
            <tr>
                <td>Reference</td>
                <td>Name</td>
                <td>PurchaseOrderId</td>
                <td>UnitProductWholeSalePrice</td>
                <td>Quantity</td>
                <td></td>
            </tr>
            </thead>
            <tbody>
            @if (Model.ProductsToPrepare.Any())
            {
                @foreach (var product in Model.ProductsToPrepare.OrderBy(p => p.Name))
                {
                    <tr>
                        <td>@product.Reference</td>
                        <td>@product.Name</td>
                        <td>@product.PurchaseOrderId</td>
                        <td>@product.UnitWholeSalePrice</td>
                        <td>@product.Quantity</td>
                        <td>
                            <a asp-controller="Products" asp-action="Edit" asp-route-id="@product.ProductId" class="btn btn-light">
                                <i class="fa fa-eye"></i>
                            </a>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
        <br/>
        <h2>Prepared products</h2>
        <table class="table table-striped table-dark">
            <thead>
            <tr>
                <td>Reference</td>
                <td>Name</td>
                <td>PurchaseOrderId</td>
                <td>UnitProductWholeSalePrice</td>
                <td>Quantity</td>
                <td>PreparedOn</td>
                <td>PreparedBy</td>
                <td>Batches</td>
                <td></td>
            </tr>
            </thead>
            <tbody>
            @if (Model.PreparedProducts.Any())
            {
                @foreach (var product in Model.PreparedProducts.OrderBy(p => p.Name))
                {
                    <tr>
                        <td>@product.Reference</td>
                        <td>@product.Name</td>
                        <td>@product.PurchaseOrderId</td>
                        <td>@product.UnitWholeSalePrice</td>
                        <td>@product.Quantity</td>
                        <td>@product.PreparedOn?.ToString("dd/MM/yyyy")</td>
                        <td>@product.PreparedBy</td>
                        <td>@(string.Join(",", product.Batches.Select(b => $"{b.Number}: {b.DLC:dd/MM/yyyy}{b.DDM:dd/MM/yyyy}")))</td>
                        <td>
                            <a asp-controller="Products" asp-action="Edit" asp-route-id="@product.ProductId" class="btn btn-light">
                                <i class="fa fa-eye"></i>
                            </a>
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
        <br/>
        <a asp-controller="Pickings" asp-action="Index" class="btn btn-light">
            Cancel
        </a>
        <button type="submit" class="btn btn-success">
            <i class="fa fa-check">&nbsp;Save</i>
        </button>
    }
</div>