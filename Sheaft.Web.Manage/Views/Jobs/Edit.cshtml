@using Sheaft.Domain.Enum
@model JobViewModel
@{
    ViewData["Title"] = "Job details";
}

<div class="container">
    <h2 class="display-4">Job details @(Model.RemovedOn.HasValue ? "(removed)":"")</h2>
    <div class="d-inline">
        @if (!Model.RemovedOn.HasValue)
        {
            @using (Html.BeginForm("Delete", "Jobs", new { id = Model.Id }, FormMethod.Post, true, new { @class = "form d-inline" }))
            {
                <button type="submit" class="btn btn-danger">
                    <i class="fa fa-trash"></i>
                </button>
            }
        }
        else
        {
            @using (Html.BeginForm("Restore", "Jobs", new { id = Model.Id }, FormMethod.Post, true, new { @class = "form d-inline" }))
            {
                <button type="submit" class="btn btn-info">
                    <i class="fa fa-trash-restore"></i>
                </button>
            }
        }
    </div>
    <div class="clearfix"></div>
    <br />

    @if (Model.Status == ProcessStatus.Expired)
    {
        @using (Html.BeginForm("Retry", "Jobs", new { id = Model.Id }, FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-outline-info">Retry</button>
        }
    }
    @if (Model.Status == ProcessStatus.Done)
    {
        @using (Html.BeginForm("Archive", "Jobs", new { id = Model.Id }, FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-outline-dark">Archive</button>
        }
    }
    @if (Model.Archived)
    {
        @using (Html.BeginForm("Unarchive", "Jobs", new { id = Model.Id }, FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-outline-dark">Unarchive</button>
        }
    }
    @if (Model.Status == ProcessStatus.Processing)
    {
        @using (Html.BeginForm("Pause", "Jobs", new { id = Model.Id }, FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-outline-warning">Pause</button>
        }
    }
    @if (Model.Status == ProcessStatus.Paused)
    {
        @using (Html.BeginForm("Resume", "Jobs", new { id = Model.Id }, FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-outline-success">Resume</button>
        }
    }
    @if (Model.Status != ProcessStatus.Waiting && Model.Status != ProcessStatus.Processing)
    {
        @using (Html.BeginForm("Reset", "Jobs", new { id = Model.Id }, FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-outline-danger">Reset</button>
        }
    }
    @if (Model.Status != ProcessStatus.Cancelled && Model.Status != ProcessStatus.Failed)
    {
        @using (Html.BeginForm("Cancel", "Jobs", new { id = Model.Id }, FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-outline-danger">Cancel</button>
        }
    }

    <br />

    @using (Html.BeginForm("Edit", "Jobs", FormMethod.Post, new { @class = "form" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        <br />
        <div class="form-group">
            @Html.LabelFor(m => m.Name)
            @Html.TextBoxFor(m => m.Name, null, new { @class = "form-control" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Kind)
            @Html.TextBoxFor(m => m.Kind, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Status)
            @Html.TextBoxFor(m => m.Status, null, new { @class = "form-control", @disabled = "disabled" })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.CreatedOn)
            @Html.TextBoxFor(m => m.CreatedOn, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.UpdatedOn)
            @Html.TextBoxFor(m => m.UpdatedOn, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        @if (Model.RemovedOn.HasValue)
        {
            <div class="form-group">
                @Html.LabelFor(m => m.RemovedOn)
                @Html.TextBoxFor(m => m.RemovedOn, null, new { @class = "form-control", @disabled = "disabled" })
            </div>
        }
        <div class="form-check">
            @Html.CheckBoxFor(m => m.Archived, new { @class = "form-check-input", @disabled = "disabled" })
            @Html.LabelFor(m => m.Archived, new { @class = "form-check-label" })
        </div>
        <br />
        <h4>Execution</h4>
        <div class="form-group">
            @Html.LabelFor(m => m.StartedOn)
            @Html.TextBoxFor(m => m.StartedOn, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.CompletedOn)
            @Html.TextBoxFor(m => m.CompletedOn, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Retried)
            @Html.TextBoxFor(m => m.Retried, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        <h4>Result</h4>
        <div class="form-group">
            @Html.LabelFor(m => m.Message)
            @Html.TextBoxFor(m => m.Message, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.File)
            @Html.TextBoxFor(m => m.File, null, new { @class = "form-control", @disabled = "disabled" })
        </div>

        <br />
        <a asp-controller="Jobs" asp-action="Index" class="btn btn-light">
            Cancel
        </a>
        <button type="submit" class="btn btn-success">
            <i class="fa fa-check">&nbsp;Save</i>
        </button>
    }

</div>
