@using Sheaft.Domain.Enum
@model ProductViewModel
@{
    ViewData["Title"] = "Product details";
    var vats = new List<SelectListItem>
    {
        new SelectListItem("0%", "0.00"),
        new SelectListItem("5.5%", "5.50"),
        new SelectListItem("10%", "10.00"),
        new SelectListItem("20%", "20.00"),
    };

    var units = new List<SelectListItem>
    {
        new SelectListItem("mL", UnitKind.ml.ToString("G")),
        new SelectListItem("L", UnitKind.l.ToString("G")),
        new SelectListItem("gr", UnitKind.g.ToString("G")),
        new SelectListItem("kg", UnitKind.kg.ToString("G")),
        new SelectListItem("Non spécifié", UnitKind.NotSpecified.ToString("G")),
    };

    var conditionings = new List<SelectListItem>
    {
        new SelectListItem("Panier", ConditioningKind.Basket.ToString("G")),
        new SelectListItem("Bouquet", ConditioningKind.Bouquet.ToString("G")),
        new SelectListItem("Boite", ConditioningKind.Box.ToString("G")),
        new SelectListItem("Poids", ConditioningKind.Bulk.ToString("G")),
        new SelectListItem("Botte", ConditioningKind.Bunch.ToString("G")),
        new SelectListItem("Pièce", ConditioningKind.Piece.ToString("G")),
        new SelectListItem("Inconnu", ConditioningKind.Not_Specified.ToString("G")),
    };

    var i = 0;
    var u = 0;
    var tags = ((List<TagViewModel>) ViewBag.Tags).Select(c => new SelectListItem(c.Name, c.Id.ToString("D"))).ToList();
    var returnables = ((List<ReturnableViewModel>) ViewBag.Returnables).Select(c => new SelectListItem(c.Name, c.Id.ToString("D"))).ToList();
    returnables.Insert(0, new SelectListItem("None", null));

    if (Model.Pictures != null)
        Model.Pictures = Model.Pictures.OrderBy(p => p.Position).ToList();
}

<div class="container">
    <h2 class="display-4 d-inline">Product details @(Model.RemovedOn.HasValue ? "(removed)" : "")</h2>
    <div class="d-inline">
        @if (!Model.RemovedOn.HasValue)
        {
            @using (Html.BeginForm("Delete", "Products", new {id = Model.Id}, FormMethod.Post, true, new {@class = "form d-inline"}))
            {
                <button type="submit" class="btn btn-danger">
                    <i class="fa fa-trash"></i>
                </button>
            }
        }
        else
        {
            @using (Html.BeginForm("Restore", "Products", new {id = Model.Id}, FormMethod.Post, true, new {@class = "form d-inline"}))
            {
                <button type="submit" class="btn btn-info">
                    <i class="fa fa-trash-restore"></i>
                </button>
            }
        }
    </div>
    <div class="clearfix"></div>
    <br/>

    @using (Html.BeginForm("Edit", "Products", FormMethod.Post, new {@class = "form", enctype = "multipart/form-data"}))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        @Html.HiddenFor(model => model.Id)
        <br/>

        <div class="form-group">
            @Html.LabelFor(c => c.Name, new {@class = "form-label"})
            @Html.TextBoxFor(c => c.Name, null, new {@class = "form-control"})
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.Reference, new {@class = "form-label"})
            @Html.TextBoxFor(c => c.Reference, null, new {@class = "form-control"})
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.Vat, new {@class = "form-label"})
            @Html.DropDownListFor(c => c.Vat, vats, new {@class = "form-control"})
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.Conditioning, new {@class = "form-label"})
            @Html.DropDownListFor(c => c.Conditioning, conditionings, new {@class = "form-control"})
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.QuantityPerUnit, new {@class = "form-label"})
            @Html.TextBoxFor(c => c.QuantityPerUnit, null, new {@class = "form-control"})
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.Unit, new {@class = "form-label"})
            @Html.DropDownListFor(c => c.Unit, units, new {@class = "form-control"})
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.ReturnableId, "Returnable", new {@class = "form-label"})
            @Html.DropDownListFor(c => c.ReturnableId, returnables, new {@class = "form-control"})
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.Tags, new {@class = "form-label"})
            @Html.ListBoxFor(c => c.Tags, tags, new {@class = "form-control", @style = "height:12rem;"})
        </div>
        <div class="form-group">
            @Html.LabelFor(c => c.Description, new {@class = "form-label"})
            @Html.TextAreaFor(c => c.Description, new {@class = "form-control"})
        </div>
        <div class="form-check">
            @Html.CheckBoxFor(m => m.Available, new {@class = "form-check-input"})
            @Html.LabelFor(m => m.Available, new {@class = "form-check-label"})
        </div>
        <br/>
        <div class="form-group">
            @Html.LabelFor(m => m.CreatedOn)
            @Html.TextBoxFor(m => m.CreatedOn, null, new {@class = "form-control", @disabled = "disabled"})
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.UpdatedOn)
            @Html.TextBoxFor(m => m.UpdatedOn, null, new {@class = "form-control", @disabled = "disabled"})
        </div>
        @if (Model.RemovedOn.HasValue)
        {
            <div class="form-group">
                @Html.LabelFor(m => m.RemovedOn)
                @Html.TextBoxFor(m => m.RemovedOn, null, new {@class = "form-control", @disabled = "disabled"})
            </div>
        }

        <h2>Images</h2>
        <table class="table table-striped table-dark">
            <thead>
            <tr>
                <td>Image</td>
                <td>Position</td>
                <td>Remove</td>
            </tr>
            </thead>
            <tbody>
            @if (Model.Pictures != null)
            {
                @foreach (var picture in Model.Pictures)
                {
                    var id = i++;
                    <tr>
                        <td>
                            @Html.HiddenFor(m => m.Pictures[id].Id)
                            @Html.HiddenFor(m => m.Pictures[id].Url)
                            <img src="@picture.Url" height="120"/>
                        </td>
                        <td>
                            @Html.TextBoxFor(m => m.Pictures[id].Position, null, new {@class = "form-control"})
                        </td>
                        <td>@Html.CheckBoxFor(m => m.Pictures[id].Remove)</td>
                    </tr>
                }
            }
            </tbody>
        </table>

        <h3>Nouvelles images</h3>
        <div class="form-group">
            @Html.TextBox("newPictures", null, new {@class = "form-control", @type = "file", @multiple=""})
        </div>
        <br/>

        <h2>Catalogs Prices</h2>
        <table class="table table-striped table-dark">
            <thead>
            <tr>
                <td>Catalog</td>
                <td>Price</td>
                <td>Remove</td>
            </tr>
            </thead>
            <tbody>
            @if (Model.CatalogsPrices != null)
            {
                @foreach (var catalog in Model.CatalogsPrices)
                {
                    var id = u++;
                    <tr>
                        <td>
                            @Html.HiddenFor(m => m.CatalogsPrices[id].Id)
                            @catalog.Name
                        </td>
                        <td>@Html.TextBoxFor(m => m.CatalogsPrices[id].WholeSalePricePerUnit, null, new {@class = "form-control"})</td>
                        <td>@Html.CheckBoxFor(m => m.CatalogsPrices[id].Remove)</td>
                    </tr>
                }
            }
            </tbody>
        </table>
        <a asp-controller="Products" asp-action="AddCatalogs" asp-route-id="@Model.Id" class="btn btn-primary">
            Add Catalogs
        </a>
        <br/>

        <br/>
        <a asp-controller="Products" asp-action="Index" class="btn btn-light">
            Cancel
        </a>
        <button type="submit" class="btn btn-success">
            <i class="fa fa-check">&nbsp;Save</i>
        </button>
    }

</div>