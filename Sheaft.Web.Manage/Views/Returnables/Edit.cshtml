@model ReturnableViewModel
@{
    ViewData["Title"] = "Returnable details";
    var vats = new List<SelectListItem> {
        new SelectListItem("5.5%", "5.5"),
        new SelectListItem("10%", "10"),
        new SelectListItem("20%", "20"),
    };

}

<div class="container">
    <h2 class="display-4">Returnable details @(Model.RemovedOn.HasValue ? "(removed)":"")</h2>
    <div class="d-inline">
        @if (!Model.RemovedOn.HasValue)
        {
            @using (Html.BeginForm("Delete", "Returnables", new { id = Model.Id }, FormMethod.Post, true, new { @class = "form d-inline" }))
            {
                <button type="submit" class="btn btn-danger">
                    <i class="fa fa-trash"></i>
                </button>
            }
        }
        else
        {
            @using (Html.BeginForm("Restore", "Returnables", new { id = Model.Id }, FormMethod.Post, true, new { @class = "form d-inline" }))
            {
                <button type="submit" class="btn btn-info">
                    <i class="fa fa-trash-restore"></i>
                </button>
            }
        }
    </div>
    <div class="clearfix"></div>
    <br />

    @using (Html.BeginForm("Edit", "Returnables", FormMethod.Post, new { @class = "form" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        <br />

        <div class="form-group">
            @Html.LabelFor(m => m.Name)
            @Html.TextBoxFor(m => m.Name, null, new { @class = "form-control" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.WholeSalePrice)
            @Html.TextBoxFor(m => m.WholeSalePrice, null, new { @class = "form-control" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Vat)
            @Html.DropDownListFor(c => c.Vat, vats, new { @class = "form-control" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.VatPrice)
            @Html.TextBoxFor(m => m.VatPrice, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.OnSalePrice)
            @Html.TextBoxFor(m => m.OnSalePrice, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Description)
            @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.CreatedOn)
            @Html.TextBoxFor(m => m.CreatedOn, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.UpdatedOn)
            @Html.TextBoxFor(m => m.UpdatedOn, null, new { @class = "form-control", @disabled = "disabled" })
        </div>
        @if (Model.RemovedOn.HasValue)
        {
            <div class="form-group">
                @Html.LabelFor(m => m.RemovedOn)
                @Html.TextBoxFor(m => m.RemovedOn, null, new { @class = "form-control", @disabled = "disabled" })
            </div>
        }

        <br />
        <a asp-controller="Returnables" asp-action="Index" class="btn btn-light">
            Cancel
        </a>
        <button type="submit" class="btn btn-success">
            <i class="fa fa-check">&nbsp;Save</i>
        </button>
    }

</div>
