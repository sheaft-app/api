@model RewardViewModel
@{
    ViewData["Title"] = "Reward details";
    var departments = ((List<DepartmentViewModel>)ViewBag.Departments).Select(c => new SelectListItem($"{c.Code} - {c.Name}", c.Id.ToString("D"))).ToList();
    var levels = ((List<LevelViewModel>)ViewBag.Levels).Select(c => new SelectListItem($"{c.Number} - {c.Name}", c.Id.ToString("D"))).ToList();
}

    <div class="container">
        <h2 class="display-4">Reward details @(Model.RemovedOn.HasValue ? "(removed)":"")</h2>
        <br />

        @using (Html.BeginForm("Edit", "Rewards", FormMethod.Post, new { @class = "form" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            <br />

            <div class="form-group">
                @Html.LabelFor(m => m.Name)
                @Html.TextBoxFor(m => m.Name, null, new { @class = "form-control" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Contact)
                @Html.TextBoxFor(m => m.Contact, null, new { @class = "form-control" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Email)
                @Html.TextBoxFor(m => m.Email, null, new { @class = "form-control", @type = "email" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Phone)
                @Html.TextBoxFor(m => m.Phone, null, new { @class = "form-control" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Image)
                @Html.TextBoxFor(m => m.Image, null, new { @class = "form-control" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Url)
                @Html.TextBoxFor(m => m.Url, null, new { @class = "form-control", @type = "url" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Description)
                @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.LevelId, "Level")
                @Html.DropDownListFor(m => m.LevelId, levels, new { @class = "form-control" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.DepartmentId, "Department")
                @Html.DropDownListFor(m => m.DepartmentId, departments, new { @class = "form-control" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.CreatedOn)
                @Html.TextBoxFor(m => m.CreatedOn, null, new { @class = "form-control", @disabled = "disabled" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.UpdatedOn)
                @Html.TextBoxFor(m => m.UpdatedOn, null, new { @class = "form-control", @disabled = "disabled" })
            </div>
            @if (Model.RemovedOn.HasValue)
            {
                <div class="form-group">
                    @Html.LabelFor(m => m.RemovedOn)
                    @Html.TextBoxFor(m => m.RemovedOn, null, new { @class = "form-control", @disabled = "disabled" })
                </div>
            }

            <br />
            <a asp-controller="Rewards" asp-action="Index" class="btn btn-light">
                Cancel
            </a>
            <button type="submit" class="btn btn-success">
                <i class="fa fa-check">&nbsp;Save</i>
            </button>
        }

    </div>
