migrationBuilder.InsertData("Levels", new List<string>() { "Uid", "Id", "CreatedOn", "Number", "RequiredPoints", "Name" }.ToArray(), new List<object>() { 1, "63b7d548-b8ae-43f6-bb9a-b47311ba57ed", "2020-05-01", "0", "1000", "Niveau 1" }.ToArray(), "dbo");
migrationBuilder.InsertData("Levels", new List<string>() { "Uid", "Id", "CreatedOn", "Number", "RequiredPoints", "Name" }.ToArray(), new List<object>() { 2, "a9193dc7-9508-4ab8-a1e3-0b72ee47589b", "2020-05-01", "1", "2000", "Niveau 1" }.ToArray(), "dbo");
migrationBuilder.InsertData("Levels", new List<string>() { "Uid", "Id", "CreatedOn", "Number", "RequiredPoints", "Name" }.ToArray(), new List<object>() { 3, "4817296a-94c7-4724-8de3-b58eca77ef5a", "2020-05-01", "2", "4000", "Niveau 2" }.ToArray(), "dbo");
migrationBuilder.InsertData("Levels", new List<string>() { "Uid", "Id", "CreatedOn", "Number", "RequiredPoints", "Name" }.ToArray(), new List<object>() { 4, "db209712-678f-4a49-8572-97cdb81aa6d7", "2020-05-01", "3", "8000", "Niveau 3" }.ToArray(), "dbo");
migrationBuilder.InsertData("Levels", new List<string>() { "Uid", "Id", "CreatedOn", "Number", "RequiredPoints", "Name" }.ToArray(), new List<object>() { 5, "874fb230-7423-4bfe-badb-508726501939", "2020-05-01", "4", "16000", "Niveau 4" }.ToArray(), "dbo");
migrationBuilder.InsertData("Levels", new List<string>() { "Uid", "Id", "CreatedOn", "Number", "RequiredPoints", "Name" }.ToArray(), new List<object>() { 6, "d09c810f-a11d-4e02-8ee7-4f231f615d63", "2020-05-01", "5", "32000", "Niveau 5" }.ToArray(), "dbo");

migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 1, "1f287ca1-b079-46e7-a229-7f91fc6683d3", "1",   "2020-05-01", "Guadeloupe", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 2, "f8be8326-b276-4a7d-88fc-0f06f04f9178", "2",   "2020-05-01", "Martinique", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 3, "da038cce-3282-4200-a4d6-c972a454a05a", "3",   "2020-05-01", "Guyane", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 4, "698e1427-7466-4a9c-83d1-4dde592b2deb", "4",   "2020-05-01", "La Réunion", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 5, "d6d153fb-9814-4927-ba44-54fcad7ab294", "6",   "2020-05-01", "Mayotte", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 6, "0b875cc4-e310-4c53-bcac-f2dfe64ef80c", "11",  "2020-05-01", "Île-de-France", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 7, "29e6ee21-7123-4bec-b514-929726c5097a", "24",  "2020-05-01", "Centre-Val de Loire", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 8, "a004f5de-bab7-49bb-97f4-87c8718e2db1", "27",  "2020-05-01", "Bourgogne-Franche-Comté", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 9, "883daf17-cc4c-4ee9-9053-a5b75f976003", "28",  "2020-05-01", "Normandie", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 10, "ee89dcbc-2b21-4b8e-9884-848131206053", "32", "2020-05-01", "Hauts-de-France", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 11, "fba132fc-e9f5-4ee0-bf1a-508b6a0dd45b", "44", "2020-05-01", "Grand Est", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 12, "a1bc7c4e-9c1d-4fb3-8d3b-0cf02f3d2aeb", "52", "2020-05-01", "Pays de la Loire", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 13, "83c15009-b51c-4f55-afe5-4c77e5899b04", "53", "2020-05-01", "Bretagne", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 14, "b802e597-7f63-4a0c-b085-5a606f099018", "75", "2020-05-01", "Nouvelle-Aquitaine", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 15, "3913a0e7-9eb6-4290-a0ee-aeecbdd7050a", "76", "2020-05-01", "Occitanie", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 16, "c170b6dc-8bca-4e63-9e67-73e9842b397d", "84", "2020-05-01", "Auvergne-Rhône-Alpes", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 17, "f94349a6-c30e-42f8-ab12-ee7a5508400c", "93", "2020-05-01", "Provence-Alpes-Côte d'Azur", 1000 }.ToArray());
migrationBuilder.InsertData("Regions", new List<string>() { "Uid", "Id", "Code", "CreatedOn", "Name", "RequiredProducers"}.ToArray(), new List<object>() { 18, "7861e7ce-cfed-4ed8-9d13-dfd0fe7c4ccc", "94", "2020-05-01", "Corse", 1000 }.ToArray());

migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 1, "a390cc3c-2b7e-4fef-959c-c8a1b52c0522", "01", "Ain", 16, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 2, "3591a6b9-41c7-409e-8c00-82f9874dfe6d", "02", "Aisne", 10, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 3, "2af56f93-2dca-4391-bc71-7c22c5c41f35", "03", "Allier", 16, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 4, "6adfdfa5-d6b7-452d-850f-53f856265d7d", "04", "Alpes-de-Haute-Provence", 17, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 5, "ef5f4cf6-5dc9-4304-bf0c-b12827fcd974", "05", "Hautes-Alpes", 17, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 6, "cb7f971f-c54d-44bf-ae74-ab96e8509a95", "06", "Alpes-Maritimes", 17, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 7, "a33cb7ec-210f-42b5-8fa9-b43555ca5667", "07", "Ardèche", 16, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 8, "5c65366e-460b-4ceb-bdde-78ee0a1f9a34", "08", "Ardennes", 11, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 9, "88908b8f-e510-4422-aea9-b5bbf4c16a87", "09", "Ariège", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 10, "b614d29e-23bc-4b90-a577-525b6778f859", "10", "Aube", 11, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 11, "214af7aa-4e3c-4bc6-8da8-51f5383826bf", "11", "Aude", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 12, "eb088d02-3da7-43f0-9171-70c8265f957c", "12", "Aveyron", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 13, "ea722aec-c5d0-4fde-8124-16488c803a11", "13", "Bouches-du-Rhône", 17, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 14, "d6316aa5-9475-4257-9cb1-9fa04759fdbe", "14", "Calvados", 9, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 15, "cdd042d5-958d-474f-a8ce-db8afd4425fc", "15", "Cantal", 16, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 16, "cabf3b17-9415-4a9b-98a0-1fc64d38e465", "16", "Charente", 14, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 17, "6447f45e-a359-4ca4-ac49-180810705ebb", "17", "Charente-Maritime", 14, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 18, "0c8d9a56-5f5f-4c8c-a0be-5e83600a637d", "18", "Cher", 7, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 19, "e2c5a4e9-64b0-4bfd-b132-35851fc00ac9", "19", "Corrèze", 14, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 20, "91d4e1f5-94fa-4d63-8258-78db30f37782", "21", "Côte-d'Or", 8, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 21, "7bf544e9-788d-424a-9381-4c9618376961", "22", "Côtes-d'Armor", 13, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 22, "6e24b4f0-8bcf-4cb0-9ee3-efa2f2b6e3ab", "23", "Creuse", 14, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 23, "276d15d5-53bc-4910-9f2a-f4a2e6b19549", "24", "Dordogne", 14, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 24, "8c39b44e-db2c-44ca-9b1a-dc9bc818479e", "25", "Doubs", 8, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 25, "3aeea4cf-56b6-4aee-8bfe-8ac53590e33e", "26", "Drôme", 16, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 26, "8fd9e12f-cd60-4089-a9c6-842da66414e8", "27", "Eure", 9, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 27, "bab801cf-e914-4065-a176-9f73f167c297", "28", "Eure-et-Loir", 7, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 28, "6d664133-1191-446b-bfd3-52aca9cb68c8", "29", "Finistère", 13, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 29, "96592e36-2bcc-4d1c-b7f9-099ef083465c", "2A", "Corse-du-Sud", 18, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 30, "7efa9a20-be90-4c7e-856f-ca869effb0ad", "2B", "Haute-Corse", 18, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 31, "b0920a0f-06c0-4c02-93c5-6cd301427052", "30", "Gard", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 32, "31687318-fe29-4fd4-8839-1c6d34abc4e8", "31", "Haute-Garonne", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 33, "033b85f9-4280-4fd9-a0a9-dc0884bcc18a", "32", "Gers", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 34, "131912d8-d9de-4506-b774-32f1f1bf874d", "33", "Gironde", 14, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 35, "a5ef4ccc-28c7-46ec-b4ec-14ba6f3cab1a", "34", "Hérault", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 36, "4890f3cf-0367-4953-8552-a32324e2cc5e", "35", "Ille-et-Vilaine", 13, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 37, "16b3ae63-6b48-4252-a3fd-a049459ae8a6", "36", "Indre", 7, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 38, "14dd7012-bf12-4048-8f4d-d61d1a71fee5", "37", "Indre-et-Loire", 7, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 39, "732c7955-2f6f-4aa3-9855-6df6b21c398d", "38", "Isère", 16, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 40, "4f5e75c8-6cd9-448b-ac22-dbcb2a9c5f2f", "39", "Jura", 8, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 41, "e89d4a63-c7c0-450b-a7cd-ac215d953fdc", "40", "Landes", 14, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 42, "330449f1-5b07-4b3e-9720-d792ce164525", "41", "Loir-et-Cher", 7, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 43, "64cd53d3-ffd8-4587-81d7-4c9432d4eddd", "42", "Loire", 16, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 44, "d450e014-78a5-46f2-b9a6-5abc4e0a4f9b", "43", "Haute-Loire", 16, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 45, "ca4f1b19-5e83-47ca-8402-9a5202c2521a", "44", "Loire-Atlantique", 12, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 46, "66bb161c-c0ac-4b5f-be73-fed5976b17c1", "45", "Loiret", 7, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 47, "ca27f61e-8b53-48ef-b8cf-4b09bb0b2cd9", "46", "Lot", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 48, "b75355a3-878d-4f54-8310-a51677161f62", "47", "Lot-et-Garonne", 14, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 49, "c3777e15-87c6-4091-8f73-32e3cbebbb8d", "48", "Lozère", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 50, "5eaaa009-7f47-4286-be92-b244c9e6c7e5", "49", "Maine-et-Loire", 12, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 51, "8344859b-daca-48c5-9d55-90c1169d8581", "50", "Manche", 9, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 52, "ae9a8d5e-2916-478a-835c-8ca53258e16e", "51", "Marne", 11, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 53, "c7a7be6a-df4d-4664-bbaf-87b1f6dc1b38", "52", "Haute-Marne", 11, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 54, "3911c618-775e-4ffe-ae3e-ae347196a387", "53", "Mayenne", 12, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 55, "2f877f7d-c7c8-4b4f-8a7e-cd55cb4e17ec", "54", "Meurthe-et-Moselle", 11, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 56, "50fe6dce-3dc8-47d8-b33d-4309babab29b", "55", "Meuse", 11, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 57, "2e52817d-cb5d-4a86-90d3-717c52d00482", "56", "Morbihan", 13, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 58, "bcb404d5-500c-4a0e-a4d5-fcf9bf5e4c42", "57", "Moselle", 11, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 59, "2d334884-01d5-4078-9dcf-f7a72697102c", "58", "Nièvre", 8, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 60, "406773ff-16ac-417e-9dc0-8e4e55458543", "59", "Nord", 10, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 61, "472ed301-1e22-4f2b-80b1-cb35d7350c97", "60", "Oise", 10, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 62, "7e1923d1-7c46-45ca-9409-fe1b0b205943", "61", "Orne", 9, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 63, "548cafec-11e7-421d-bc4f-8a45263a3e61", "62", "Pas-de-Calais", 10, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 64, "6542e5c5-6701-4fef-9788-94a178530864", "63", "Puy-de-Dôme", 16, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 65, "ff2e570b-bfaf-4a46-b01b-ab204f20c3a5", "64", "Pyrénées-Atlantiques", 14, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 66, "8a19c1f4-d89c-4cec-9a78-12de5eb72df3", "65", "Hautes-Pyrénées", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 67, "38895f3a-96c3-4169-8acb-56a43fc7ac6d", "66", "Pyrénées-Orientales", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 68, "eb47f6bb-533b-4791-bb02-4b4555020931", "67", "Bas-Rhin", 11, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 69, "8bd4b09d-4715-46f3-96de-a8b7d69a20b0", "68", "Haut-Rhin", 11, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 70, "24bb4bfe-37b1-4d20-be16-062a205969f4", "69", "Rhône", 16, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 71, "d189386f-461c-4a24-9b60-672af1659aaf", "70", "Haute-Saône", 8, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 72, "7174c8e5-9c5d-4f1b-923d-9b1833110790", "71", "Saône-et-Loire", 8, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 73, "cd6c7933-914d-4400-b000-01533ba35c7d", "72", "Sarthe", 12, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 74, "f86550ac-cbc8-46ac-ad4f-bc3556d92832", "73", "Savoie", 16, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 75, "4ee2a021-b29c-4869-ab47-6696f1da9699", "74", "Haute-Savoie", 16, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 76, "687601d9-b79c-4eb7-900c-3f5568db57ec", "75", "Paris", 6, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 77, "429738fc-4fd5-443e-843a-ef9a0971a97a", "76", "Seine-Maritime", 9, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 78, "1469cc14-0389-4fb0-9ca9-6c45975ccd1f", "77", "Seine-et-Marne", 6, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 79, "6ddb130b-4b90-430a-a7fa-bde7cb0c742f", "78", "Yvelines", 6, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 80, "f190e3fd-7021-4f97-b2c9-c1a7556bb0f6", "79", "Deux-Sèvres", 14, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 81, "337d9390-2fbb-473b-81da-a7244ab82463", "80", "Somme", 10, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 82, "6e8e5f1f-ccdc-41ba-bb1a-039f70e4bd38", "81", "Tarn", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 83, "b5c6379c-7a2f-4734-bced-262a8ab45736", "82", "Tarn-et-Garonne", 15, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 84, "05560d90-adff-4f67-be8d-2334a2306047", "83", "Var", 17, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 85, "1975b766-d113-4b0a-8f8f-d10a99a06d64", "84", "Vaucluse", 17, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 86, "8efb942a-2fe2-499b-a49a-0021372a7a1f", "85", "Vendée", 12, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 87, "9dcaf754-611a-410d-9ed1-d082d57601cd", "86", "Vienne", 14, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 88, "a7f67f8f-1a79-4afa-8ddd-1cd68092b417", "87", "Haute-Vienne", 14, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 89, "db5cb50f-74f0-4de0-94c8-ae869e803890", "88", "Vosges", 11, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 90, "da7d31b6-8877-4acc-bb95-8f6297674664", "89", "Yonne", 8, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 91, "d6cd7169-ff6d-4df4-910c-a4d59d40c009", "90", "Territoire de Belfort", 8, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 92, "024eab49-3441-41c9-baad-07ed7acc4bfb", "91", "Essonne", 6, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 93, "b83b145b-861c-490c-bddc-778da18491b7", "92", "Hauts-de-Seine", 6, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 94, "4784eaa3-8dcd-4ab6-9003-5531cea75b9e", "93", "Seine-Saint-Denis", 6, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 95, "9f718d62-7da3-4c5a-8115-b46265012f77", "94", "Val-de-Marne", 6, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 96, "fd139b6c-e28d-4463-96c9-06d93b2b4e1b", "95", "Val-d'Oise", 6, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 97, "36bcdda7-4a89-4f75-994b-e2c45e9a011a", "971", "Guadeloupe", 1, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 98, "b1c6bde9-5f66-488d-9661-1235cd82af05", "972", "Martinique", 2, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 99, "b4ed220b-20ad-4789-b569-313b959b3a0a", "973", "Guyane", 3, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 100, "cfb4be72-e968-4855-8a44-da1ffd309959", "974", "La Réunion", 4, 1, 150 }.ToArray());
migrationBuilder.InsertData("Departments", new List<string>() { "CreatedOn", "Uid", "Id", "Code", "Name", "RegionUid", "LevelUid", "RequiredProducers"}.ToArray(), new List<object>() { "2020-05-01", 101, "33e79704-405b-423f-88bc-db48475cc88a", "976", "Mayotte", 5, 1, 150 }.ToArray());

migrationBuilder.InsertData("Tags", new List<string>() { "Uid", "Id", "Name", "Description", "CreatedOn", "Kind" }.ToArray(), new List<object>() { 1, "5CA7C664-EFEF-44CF-8CCE-174A8478FB42", "Fruits et légumes", "Fruits, petit fruits, patates, carrottes etc...", "2019-06-29 21:01:53", "0" }.ToArray(), "dbo");
migrationBuilder.InsertData("Tags", new List<string>() { "Uid", "Id", "Name", "Description", "CreatedOn", "Kind" }.ToArray(), new List<object>() { 2, "0F3C3AA9-DA8F-4EEE-AC77-F41C93CBAC72", "Viandes", "Viande rouge, viande blanche, poissons etc...", "2019-06-29 21:01:53", "0" }.ToArray(), "dbo");
migrationBuilder.InsertData("Tags", new List<string>() { "Uid", "Id", "Name", "Description", "CreatedOn", "Kind" }.ToArray(), new List<object>() { 3, "F6151E93-C5D7-4F19-BDE3-841210A9C351", "Boissons", "Sirop, jus de fruits etc...", "2019-06-29 21:01:53", "0" }.ToArray(), "dbo");
migrationBuilder.InsertData("Tags", new List<string>() { "Uid", "Id", "Name", "Description", "CreatedOn", "Kind" }.ToArray(), new List<object>() { 4, "E32B2112-35D5-4054-AA6A-654DE9A11A35", "Poissons", "Produits de la mer etc...", "2019-06-29 21:01:53", "0" }.ToArray(), "dbo");
migrationBuilder.InsertData("Tags", new List<string>() { "Uid", "Id", "Name", "Description", "CreatedOn", "Kind" }.ToArray(), new List<object>() { 5, "E1B192B8-A9DF-42D7-AEC5-DAA29DAE2815", "Oeufs et produits laitiers", "Yaourts, oeufs, lait, fromages etc...", "2019-06-29 21:01:53", "0" }.ToArray(), "dbo");
migrationBuilder.InsertData("Tags", new List<string>() { "Uid", "Id", "Name", "Description", "CreatedOn", "Kind" }.ToArray(), new List<object>() { 6, "6A30A69D-FFC2-411A-84DE-BCE8B9BA86F8", "Épicerie", "Compotes, soupes, pain, miel etc...", "2019-06-29 21:01:53", "0" }.ToArray(), "dbo");
migrationBuilder.InsertData("Tags", new List<string>() { "Uid", "Id", "Name", "Description", "CreatedOn", "Kind" }.ToArray(), new List<object>() { 7, "B73A3E67-4123-496A-9F6A-7B904BF712BA", "Bio", "Produits issus de l'agriculture biologique", "2019-06-29 21:01:53", "1" }.ToArray(), "dbo");

migrationBuilder.Sql("CREATE FUNCTION [dbo].[InlineMax](@val1 datetime, @val2 datetime) returns datetime as begin if @val1 > @val2 return @val1 return isnull(@val2,@val1) end");
migrationBuilder.Sql("CREATE FUNCTION [dbo].[GetProductImage](@productId uniqueidentifier, @image nvarchar(max), @companyId uniqueidentifier, @tags nvarchar(max)) returns nvarchar(max) as begin   if @image is not null and (@image like '%.jpg' or @image like '%.jpeg' or @image like '%.png')     return @image      if @image is not null      return 'https://sheaftapp.blob.core.windows.net/pictures/companies/' + Lower(convert(nvarchar(50), @companyId)) + '/products/' + Lower(convert(nvarchar(50), @productId)) + '/' + @image + '_medium.jpg'   declare @tag nvarchar(max)   select @tag = LOWER(value)   from STRING_SPLIT(@tags, ',')   if @tag = 'fruits et légumes'     return 'https://sheaftapp.blob.core.windows.net/pictures/products/categories/fruitsvegetables.jpg'   if @tag = 'oeufs et produits laitiers'  	return 'https://sheaftapp.blob.core.windows.net/pictures/products/categories/dairy.jpg'   if @tag = 'poissons'  	return 'https://sheaftapp.blob.core.windows.net/pictures/products/categories/fish.jpg'   if @tag = 'épicerie'  	return 'https://sheaftapp.blob.core.windows.net/pictures/products/categories/grocery.jpg'   if @tag = 'viandes'  	return 'https://sheaftapp.blob.core.windows.net/pictures/products/categories/meat.jpg'   if @tag = 'boissons'  	return 'https://sheaftapp.blob.core.windows.net/pictures/products/categories/drinks.jpg'   return '' end");

migrationBuilder.Sql("CREATE PROCEDURE MarkUserNotificationsAsRead @UserUid uniqueidentifier, @ReadBefore datetimeoffset AS  BEGIN	 	declare @Uid bigint 	set @Uid = (select u.Uid from dbo.users u where u.Id = @UserUId)     update dbo.Notifications set Unread = 0 where UserUid = @Uid and CreatedOn < @ReadBefore END");
migrationBuilder.Sql("CREATE VIEW UserPointsPerDepartment    WITH SCHEMABINDING    AS SELECT UserId, Kind, Name, Picture, RegionId, DepartmentId, Points, Position     FROM (         SELECT u.Id as UserId, Kind, case when u.Anonymous = 1 then null else u.Name end as Name, case when u.Anonymous = 1 then null else u.Picture end as Picture, r.Id as RegionId, d.Id as DepartmentId, sum(totalPoints) as Points, count(distinct u.Uid) as Users, Rank()            over (ORDER BY sum(totalPoints) DESC ) AS Position         FROM dbo.Users u            join dbo.UserAddresses ua on ua.UserUid = u.Uid          join dbo.Departments d on d.Uid = ua.DepartmentUid          join dbo.Regions r on r.Uid = d.Uid 		group by r.Id, d.Id, u.Id, Kind, case when u.Anonymous = 1 then null else u.Name end, case when u.Anonymous = 1 then null else u.Picture end         ) rs  where Position <= 10");
migrationBuilder.Sql("CREATE VIEW UserPointsPerRegion    WITH SCHEMABINDING    AS SELECT UserId, Kind, Name, Picture, RegionId, Points, Position     FROM (         SELECT u.Id as UserId, Kind, case when u.Anonymous = 1 then null else u.Name end as Name, case when u.Anonymous = 1 then null else u.Picture end as Picture, r.Id as RegionId, sum(totalPoints) as Points, count(distinct u.Uid) as Users, Rank()            over (ORDER BY sum(totalPoints) DESC ) AS Position         FROM dbo.Users u            join dbo.UserAddresses ua on ua.UserUid = u.Uid          join dbo.Departments d on d.Uid = ua.DepartmentUid          join dbo.Regions r on r.Uid = d.Uid 		group by r.Id, u.Id, Kind, case when u.Anonymous = 1 then null else u.Name end, case when u.Anonymous = 1 then null else u.Picture end         ) rs  where Position <= 10");
migrationBuilder.Sql("CREATE VIEW UserPointsPerCountry    WITH SCHEMABINDING    AS SELECT UserId, Kind, Name, Picture, Points, Position     FROM (         SELECT u.Id as UserId, Kind, case when u.Anonymous = 1 then null else u.Name end as Name, case when u.Anonymous = 1 then null else u.Picture end as Picture, sum(totalPoints) as Points, count(distinct u.Uid) as Users, Rank()            over (ORDER BY sum(totalPoints) DESC ) AS Position         FROM dbo.Users u   		group by u.Id, Kind, case when u.Anonymous = 1 then null else u.Name end, case when u.Anonymous = 1 then null else u.Picture end         ) rs  where Position <= 10");
migrationBuilder.Sql("CREATE VIEW PointsPerDepartment    WITH SCHEMABINDING    AS SELECT RegionId, RegionName, Code, DepartmentId, DepartmentName, Points, Users, Position     FROM (         SELECT r.Id as RegionId, r.Name as RegionName, d.Name as DepartmentName, d.Code, d.Id as DepartmentId, sum(totalPoints) as Points, count(distinct u.Uid) as Users, Rank()            over (ORDER BY sum(totalPoints) DESC ) AS Position         FROM dbo.Users u            join dbo.UserAddresses ua on ua.UserUid = u.Uid          join dbo.Departments d on d.Uid = ua.DepartmentUid          join dbo.Regions r on r.Uid = d.Uid 		group by r.Id, r.Name, d.Id, d.Name, d.Code         ) rs  where Position <= 10");
migrationBuilder.Sql("CREATE VIEW PointsPerRegion    WITH SCHEMABINDING    AS SELECT RegionId, RegionName, Points, Users, Position     FROM (         SELECT r.Id as RegionId, r.Name as RegionName, sum(totalPoints) as Points, count(distinct u.Uid) as Users, Rank()            over (ORDER BY sum(totalPoints) DESC ) AS Position         FROM dbo.Users u            join dbo.UserAddresses ua on ua.UserUid = u.Uid          join dbo.Departments d on d.Uid = ua.DepartmentUid          join dbo.Regions r on r.Uid = d.Uid 		group by r.Id, r.Name         ) rs  where Position <= 10");
migrationBuilder.Sql("CREATE VIEW PointsPerCountry    WITH SCHEMABINDING    AS select sum(TotalPoints) as Points, count(distinct Uid) as Users from dbo.Users");
migrationBuilder.Sql("CREATE PROCEDURE UserPositionInDepartement @DepartmentId uniqueidentifier, @UserId uniqueidentifier AS  BEGIN    SELECT Points, Position    FROM (       SELECT u.Id, sum(TotalPoints) as Points, Rank()              over (ORDER BY sum(TotalPoints) DESC ) AS Position          FROM dbo.Users u           join dbo.UserAddresses ua on ua.UserUid = u.Uid          join dbo.Departments d on d.Uid = ua.DepartmentUid          where d.Id = @DepartmentId          group by d.Id, u.Id       ) rs     WHERE Id = @UserId END");
migrationBuilder.Sql("CREATE PROCEDURE UserPositionInRegion @RegionId uniqueidentifier, @UserId uniqueidentifier AS  BEGIN    SELECT Points, Position    FROM (       SELECT u.Id, sum(TotalPoints) as Points, Rank()              over (ORDER BY sum(TotalPoints) DESC ) AS Position          FROM dbo.Users u           join dbo.UserAddresses ua on ua.UserUid = u.Uid          join dbo.Departments d on d.Uid = ua.DepartmentUid          join dbo.Regions r on r.Uid = d.Uid          where r.Id = @RegionId          group by r.Id, u.Id       ) rs     WHERE Id = @UserId END");
migrationBuilder.Sql("CREATE PROCEDURE UserPositionInCountry @UserId uniqueidentifier AS  BEGIN    SELECT Points, Position    FROM (       SELECT Id, TotalPoints as Points, Rank()              over (ORDER BY TotalPoints DESC ) AS Position          FROM dbo.Users        ) rs     WHERE Id = @UserId END");

migrationBuilder.Sql("CREATE VIEW ProducersPerDepartment AS select DepartmentId, DepartmentCode, DepartmentName, RegionId, RegionCode, RegionName, sum(Active) AS Active, sum(Created) as Created from ( select d.Id as DepartmentId, d.Code as DepartmentCode, d.Name as DepartmentName, r.Id as RegionId, r.Code as RegionCode, r.Name as RegionName, case when count(p.Uid) > 0 then 1 else 0 end as Active, count(distinct(c.Uid)) as Created from dbo.Departments d join dbo.Regions r on r.Uid = d.RegionUid left join dbo.UserAddresses ca on d.Uid = ca.DepartmentUid left join dbo.Users c on c.Uid = ca.UserUid and c.Kind = 0 left join dbo.Products p on c.Uid = p.ProducerUid group by c.Kind, d.Id, d.Code, d.Name, r.Id, r.Code, r.Name, c.RemovedOn ) cc group by DepartmentId, DepartmentCode, DepartmentName, RegionId, RegionCode, RegionName");
migrationBuilder.Sql("CREATE VIEW StoresPerDepartment AS select DepartmentId, DepartmentCode, DepartmentName, RegionId, RegionCode, RegionName, sum(Active) AS Active, sum(Created) as Created from ( select d.Id as DepartmentId, d.Code as DepartmentCode, d.Name as DepartmentName, r.Id as RegionId, r.Code as RegionCode, r.Name as RegionName, case when count(p.Uid) > 0 then 1 else 0 end as Active, count(distinct(c.Uid)) as Created from dbo.Departments d join dbo.Regions r on r.Uid = d.RegionUid left join dbo.UserAddresses ca on d.Uid = ca.DepartmentUid left join dbo.Users c on c.Uid = ca.UserUid and c.Kind = 1 left join dbo.Products p on c.Uid = p.ProducerUid group by c.Kind, d.Id, d.Code, d.Name, r.Id, r.Code, r.Name, c.RemovedOn ) cc group by DepartmentId, DepartmentCode, DepartmentName, RegionId, RegionCode, RegionName");

migrationBuilder.Sql("CREATE VIEW ProducersSearch as 	select      r.Id as producer_id      , r.Name as producer_name         , r.Name as partialProducerName      , r.Email as producer_email      , r.Picture as producer_picture      , r.Phone as producer_phone      , ra.Line1 as producer_line1      , ra.Line2 as producer_line2      , ra.Zipcode as producer_zipcode      , ra.City as producer_city      , dbo.InlineMax(r.CreatedOn, dbo.InlineMax(r.UpdatedOn, t.UpdatedOn)) as last_update      , case when r.RemovedOn is null then 0 else 1 end as removed      , '[' + STRING_AGG('\"' + LOWER(t.Name) + '\"', ',') + ']' as producer_tags           , ra.Longitude as producer_longitude      , ra.Latitude as producer_latitude      , geography::STGeomFromText('POINT('+convert(varchar(20),ra.Longitude)+' '+convert(varchar(20),ra.Latitude)+')',4326) as producer_geolocation      , count(p.Id) as producer_products_count     from dbo.Users r      join dbo.UserAddresses ra on r.Uid = ra.UserUid     left join dbo.ProducerTags ct on r.Uid = ct.ProducerUid     left join dbo.Tags t on t.Uid = ct.TagUid     left join dbo.Products p on p.ProducerUid = r.Uid	 	where r.Kind = 0 and r.OpenForNewBusiness = 1   group by 	r.Id,     r.Name,     r.Email, 	r.Picture,     r.Phone,     ra.Line1,     ra.Line2,     ra.Zipcode,     ra.City,     dbo.InlineMax(r.CreatedOn, dbo.InlineMax(r.UpdatedOn, t.UpdatedOn)),     case when r.RemovedOn is null then 0 else 1 end,     ra.Longitude,     ra.Latitude");
migrationBuilder.Sql("CREATE VIEW ProductsSearch as     select     p.Id as product_id      , p.Name as product_name      , p.Name as partialProductName 	 , CAST(p.QuantityPerUnit as float) as product_quantityPerUnit	      , case when p.Unit = 0 then 'mL' 			when p.Unit = 1 then 'L' 			when p.Unit = 2 then 'g' 			when p.Unit = 3 then 'kg' end as product_unit														      , CAST(p.OnSalePricePerUnit as float) as product_onSalePricePerUnit      , CAST(p.OnSalePrice as float) as product_onSalePrice      , CAST(p.Rating as float) as product_rating      , p.RatingsCount as product_ratings_count      , case when pa.Uid is not null then cast(1 as bit) else cast(0 as bit) end as packaged      , r.Id as producer_id      , r.Name as producer_name      , r.Email as producer_email      , r.Phone as producer_phone      , ra.Zipcode as producer_zipcode      , ra.City as producer_city 	 , dbo.GetProductImage(p.Id, p.image, r.Id, STRING_AGG(LOWER(case when t.Kind = 0 then t.Name end), ',')) as product_image      , dbo.InlineMax(dbo.InlineMax(dbo.InlineMax(p.UpdatedOn, r.UpdatedOn), t.UpdatedOn), p.CreatedOn) as last_update      , case when (dbo.InlineMax(p.RemovedOn, r.RemovedOn)) is null and p.Available = 1 then 0 else 1 end as removed      , '[' + STRING_AGG('\"' + LOWER(t.Name) + '\"', ',') + ']' as product_tags           , ra.Longitude as producer_longitude      , ra.Latitude as producer_latitude      , geography::STGeomFromText('POINT('+convert(varchar(20),ra.Longitude)+' '+convert(varchar(20),ra.Latitude)+')',4326) as producer_geolocation   from dbo.Products p     join dbo.Users r on r.Uid = p.ProducerUid and r.Kind = 0     join dbo.UserAddresses ra on r.Uid = ra.UserUid 	join dbo.DeliveryModes dm on dm.ProducerUid = r.Uid and dm.Kind in (1, 2, 3, 4)      left join dbo.ProductTags pt on p.Uid = pt.ProductUid     left join dbo.Packagings pa on pa.Uid = p.PackagingUid     left join dbo.Tags t on t.Uid = pt.TagUid   group by     p.Id,     p.Name,    case when p.Unit = 0 then 'mL' 			when p.Unit = 1 then 'L' 			when p.Unit = 2 then 'g' 			when p.Unit = 3 then 'kg' end, 	CAST(p.QuantityPerUnit as float),	 	CAST(p.OnSalePricePerUnit as float),     CAST(p.OnSalePrice as float),     CAST(p.WholeSalePrice as float),     CAST(p.Rating as float),     p.RatingsCount, 	case when pa.Uid is not null then cast(1 as bit) else cast(0 as bit) end, 	r.Id,     r.Name,     r.Email, 	p.Image, 	r.Id,     r.Phone,     ra.Zipcode,     ra.City,     dbo.InlineMax(dbo.InlineMax(dbo.InlineMax(p.UpdatedOn, r.UpdatedOn), t.UpdatedOn), p.CreatedOn),     case when (dbo.InlineMax(p.RemovedOn, r.RemovedOn)) is null and p.Available = 1 then 0 else 1 end,     ra.Longitude,     ra.Latitude");
migrationBuilder.Sql("CREATE VIEW StoresSearch as     select      r.Id as store_id      , r.Name as store_name       , r.Name as partialStoreName      , r.Email as store_email      , r.Picture as store_picture      , r.Phone as store_phone      , ra.Line1 as store_line1      , ra.Line2 as store_line2      , ra.Zipcode as store_zipcode      , ra.City as store_city      , dbo.InlineMax(r.CreatedOn, dbo.InlineMax(r.UpdatedOn, t.UpdatedOn)) as last_update      , case when r.RemovedOn is null then 0 else 1 end as removed      , '[' + STRING_AGG('\"' + LOWER(t.Name) + '\"', ',') + ']' as store_tags           , ra.Longitude as store_longitude      , ra.Latitude as store_latitude      , geography::STGeomFromText('POINT('+convert(varchar(20),ra.Longitude)+' '+convert(varchar(20),ra.Latitude)+')',4326) as store_geolocation    from dbo.Users r      join dbo.UserAddresses ra on r.Uid = ra.UserUid     left join dbo.StoreTags ct on r.Uid = ct.StoreUid     left join dbo.Tags t on t.Uid = ct.TagUid	 	where r.Kind = 1 and r.OpenForNewBusiness = 1    group by 	r.Id,     r.Name,     r.Email, 	r.Picture,     r.Phone,     ra.Line1,     ra.Line2,     ra.Zipcode,     ra.City,     dbo.InlineMax(r.CreatedOn, dbo.InlineMax(r.UpdatedOn, t.UpdatedOn)),     case when r.RemovedOn is null then 0 else 1 end,     ra.Longitude,     ra.Latitude");

migrationBuilder.Sql("CREATE SCHEMA [Cache]");
migrationBuilder.Sql("CREATE TABLE [Cache].[CachedItems](	[Id] [nvarchar](449) NOT NULL,	[Value] [varbinary](max) NOT NULL,	[ExpiresAtTime] [datetimeoffset](7) NOT NULL,	[SlidingExpirationInSeconds] [bigint] NULL,	[AbsoluteExpiration] [datetimeoffset](7) NULL,PRIMARY KEY CLUSTERED(	[Id] ASC)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]");
migrationBuilder.Sql("CREATE NONCLUSTERED INDEX [Index_ExpiresAtTime] ON [Cache].[CachedItems](	[ExpiresAtTime] ASC)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]");





            
migrationBuilder.Sql("DROP SCHEMA Cache;");
migrationBuilder.Sql("DROP CONSTRAINT [Index_ExpiresAtTime];");

migrationBuilder.Sql("DROP PROCEDURE UserPositionInCountry;");
migrationBuilder.Sql("DROP PROCEDURE UserPositionInRegion;");
migrationBuilder.Sql("DROP PROCEDURE UserPositionInDepartement;");
migrationBuilder.Sql("DROP PROCEDURE MarkUserNotificationsAsRead;");

migrationBuilder.Sql("DROP FUNCTION InlineMax;");
migrationBuilder.Sql("DROP FUNCTION GetProductImage;");

migrationBuilder.Sql("DROP VIEW StoresSearch");
migrationBuilder.Sql("DROP VIEW ProductsSearch");
migrationBuilder.Sql("DROP VIEW ProducersSearch");
migrationBuilder.Sql("DROP VIEW ProducersPerDepartment");
migrationBuilder.Sql("DROP VIEW StoresPerDepartment");
migrationBuilder.Sql("DROP VIEW UserPointsPerDepartment");
migrationBuilder.Sql("DROP VIEW UserPointsPerRegion");
migrationBuilder.Sql("DROP VIEW UserPointsPerCountry");
migrationBuilder.Sql("DROP VIEW PointsPerDepartment");
migrationBuilder.Sql("DROP VIEW PointsPerRegion");
migrationBuilder.Sql("DROP VIEW PointsPerCountry");