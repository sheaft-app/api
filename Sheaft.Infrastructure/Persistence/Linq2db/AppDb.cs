// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public partial class AppDb : DataConnection
	{
		#region Schemas
		public void InitSchemas()
		{
			Hf = new HfSchema.DataContext(this);
		}

		public HfSchema.DataContext Hf { get; set; } = null!;
		#endregion

		public AppDb()
		{
			InitSchemas();
			InitDataContext();
		}

		public AppDb(string configuration)
			: base(configuration)
		{
			InitSchemas();
			InitDataContext();
		}

		public AppDb(LinqToDBConnectionOptions<AppDb> options)
			: base(options)
		{
			InitSchemas();
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<DeliveryLine>            DeliveryLines             => this.GetTable<DeliveryLine>();
		public ITable<OrderLine>               OrderLines                => this.GetTable<OrderLine>();
		public ITable<Product>                 Products                  => this.GetTable<Product>();
		public ITable<AgreementDeliveryDay>    AgreementDeliveryDays     => this.GetTable<AgreementDeliveryDay>();
		public ITable<DeliveryAdjustmentBatch> DeliveryAdjustmentBatches => this.GetTable<DeliveryAdjustmentBatch>();
		public ITable<DeliveryLineBatch>       DeliveryLineBatches       => this.GetTable<DeliveryLineBatch>();
		public ITable<CatalogProduct>          CatalogProducts           => this.GetTable<CatalogProduct>();
		public ITable<EfMigrationsHistory>     EfMigrationsHistories     => this.GetTable<EfMigrationsHistory>();
		public ITable<Account>                 Accounts                  => this.GetTable<Account>();
		public ITable<Document>                Documents                 => this.GetTable<Document>();
		public ITable<Invoice>                 Invoices                  => this.GetTable<Invoice>();
		public ITable<AccountRefreshToken>     AccountRefreshTokens      => this.GetTable<AccountRefreshToken>();
		public ITable<Customer>                Customers                 => this.GetTable<Customer>();
		public ITable<Supplier>                Suppliers                 => this.GetTable<Supplier>();
		public ITable<InvoiceLine>             InvoiceLines              => this.GetTable<InvoiceLine>();
		public ITable<InvoicePayment>          InvoicePayments           => this.GetTable<InvoicePayment>();
		public ITable<Batch>                   Batches                   => this.GetTable<Batch>();
		public ITable<Catalog>                 Catalogs                  => this.GetTable<Catalog>();
		public ITable<Delivery>                Deliveries                => this.GetTable<Delivery>();
		public ITable<Order>                   Orders                    => this.GetTable<Order>();
		public ITable<Returnable>              Returnables               => this.GetTable<Returnable>();
		public ITable<Agreement>               Agreements                => this.GetTable<Agreement>();
		public ITable<DeliveryAdjustment>      DeliveryAdjustments       => this.GetTable<DeliveryAdjustment>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static DeliveryLine? Find(this ITable<DeliveryLine> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<DeliveryLine?> FindAsync(this ITable<DeliveryLine> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static OrderLine? Find(this ITable<OrderLine> table, string orderId, string identifier)
		{
			return table.FirstOrDefault(e => e.OrderId == orderId && e.Identifier == identifier);
		}

		public static Task<OrderLine?> FindAsync(this ITable<OrderLine> table, string orderId, string identifier, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.OrderId == orderId && e.Identifier == identifier, cancellationToken);
		}

		public static Product? Find(this ITable<Product> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Product?> FindAsync(this ITable<Product> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AgreementDeliveryDay? Find(this ITable<AgreementDeliveryDay> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AgreementDeliveryDay?> FindAsync(this ITable<AgreementDeliveryDay> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static DeliveryAdjustmentBatch? Find(this ITable<DeliveryAdjustmentBatch> table, long deliveryAdjustmentId, string batchIdentifier)
		{
			return table.FirstOrDefault(e => e.DeliveryAdjustmentId == deliveryAdjustmentId && e.BatchIdentifier == batchIdentifier);
		}

		public static Task<DeliveryAdjustmentBatch?> FindAsync(this ITable<DeliveryAdjustmentBatch> table, long deliveryAdjustmentId, string batchIdentifier, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.DeliveryAdjustmentId == deliveryAdjustmentId && e.BatchIdentifier == batchIdentifier, cancellationToken);
		}

		public static DeliveryLineBatch? Find(this ITable<DeliveryLineBatch> table, long deliveryLineId, string batchIdentifier)
		{
			return table.FirstOrDefault(e => e.DeliveryLineId == deliveryLineId && e.BatchIdentifier == batchIdentifier);
		}

		public static Task<DeliveryLineBatch?> FindAsync(this ITable<DeliveryLineBatch> table, long deliveryLineId, string batchIdentifier, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.DeliveryLineId == deliveryLineId && e.BatchIdentifier == batchIdentifier, cancellationToken);
		}

		public static CatalogProduct? Find(this ITable<CatalogProduct> table, string catalogId, string productId)
		{
			return table.FirstOrDefault(e => e.CatalogId == catalogId && e.ProductId == productId);
		}

		public static Task<CatalogProduct?> FindAsync(this ITable<CatalogProduct> table, string catalogId, string productId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CatalogId == catalogId && e.ProductId == productId, cancellationToken);
		}

		public static EfMigrationsHistory? Find(this ITable<EfMigrationsHistory> table, string migrationId)
		{
			return table.FirstOrDefault(e => e.MigrationId == migrationId);
		}

		public static Task<EfMigrationsHistory?> FindAsync(this ITable<EfMigrationsHistory> table, string migrationId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.MigrationId == migrationId, cancellationToken);
		}

		public static Account? Find(this ITable<Account> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Account?> FindAsync(this ITable<Account> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Document? Find(this ITable<Document> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Document?> FindAsync(this ITable<Document> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Invoice? Find(this ITable<Invoice> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Invoice?> FindAsync(this ITable<Invoice> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static AccountRefreshToken? Find(this ITable<AccountRefreshToken> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AccountRefreshToken?> FindAsync(this ITable<AccountRefreshToken> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Customer? Find(this ITable<Customer> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Customer?> FindAsync(this ITable<Customer> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Supplier? Find(this ITable<Supplier> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Supplier?> FindAsync(this ITable<Supplier> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static InvoiceLine? Find(this ITable<InvoiceLine> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<InvoiceLine?> FindAsync(this ITable<InvoiceLine> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static InvoicePayment? Find(this ITable<InvoicePayment> table, string invoiceId, string reference)
		{
			return table.FirstOrDefault(e => e.InvoiceId == invoiceId && e.Reference == reference);
		}

		public static Task<InvoicePayment?> FindAsync(this ITable<InvoicePayment> table, string invoiceId, string reference, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InvoiceId == invoiceId && e.Reference == reference, cancellationToken);
		}

		public static Batch? Find(this ITable<Batch> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Batch?> FindAsync(this ITable<Batch> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Catalog? Find(this ITable<Catalog> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Catalog?> FindAsync(this ITable<Catalog> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Delivery? Find(this ITable<Delivery> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Delivery?> FindAsync(this ITable<Delivery> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Order? Find(this ITable<Order> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Order?> FindAsync(this ITable<Order> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Returnable? Find(this ITable<Returnable> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Returnable?> FindAsync(this ITable<Returnable> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Agreement? Find(this ITable<Agreement> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Agreement?> FindAsync(this ITable<Agreement> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static DeliveryAdjustment? Find(this ITable<DeliveryAdjustment> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<DeliveryAdjustment?> FindAsync(this ITable<DeliveryAdjustment> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion
	}
}
