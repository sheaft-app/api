// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace DataModel
{
	public static partial class HfSchema
	{
		public partial class DataContext
		{
			private readonly IDataContext _dataContext;

			public ITable<Schema>            Schemas            => _dataContext.GetTable<Schema>();
			public ITable<Job>               Jobs               => _dataContext.GetTable<Job>();
			public ITable<State>             States             => _dataContext.GetTable<State>();
			public ITable<JobParameter>      JobParameters      => _dataContext.GetTable<JobParameter>();
			public ITable<JobQueue>          JobQueues          => _dataContext.GetTable<JobQueue>();
			public ITable<Server>            Servers            => _dataContext.GetTable<Server>();
			public ITable<List>              Lists              => _dataContext.GetTable<List>();
			public ITable<Set>               Sets               => _dataContext.GetTable<Set>();
			public ITable<Counter>           Counters           => _dataContext.GetTable<Counter>();
			public ITable<Hash>              Hashes             => _dataContext.GetTable<Hash>();
			public ITable<AggregatedCounter> AggregatedCounters => _dataContext.GetTable<AggregatedCounter>();

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		#region Table Extensions
		public static Schema? Find(this ITable<Schema> table, int version)
		{
			return table.FirstOrDefault(e => e.Version == version);
		}

		public static Task<Schema?> FindAsync(this ITable<Schema> table, int version, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Version == version, cancellationToken);
		}

		public static Job? Find(this ITable<Job> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Job?> FindAsync(this ITable<Job> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static State? Find(this ITable<State> table, long jobId, long id)
		{
			return table.FirstOrDefault(e => e.JobId == jobId && e.Id == id);
		}

		public static Task<State?> FindAsync(this ITable<State> table, long jobId, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.JobId == jobId && e.Id == id, cancellationToken);
		}

		public static JobParameter? Find(this ITable<JobParameter> table, long jobId, string name)
		{
			return table.FirstOrDefault(e => e.JobId == jobId && e.Name == name);
		}

		public static Task<JobParameter?> FindAsync(this ITable<JobParameter> table, long jobId, string name, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.JobId == jobId && e.Name == name, cancellationToken);
		}

		public static JobQueue? Find(this ITable<JobQueue> table, string queue, long id)
		{
			return table.FirstOrDefault(e => e.Queue == queue && e.Id == id);
		}

		public static Task<JobQueue?> FindAsync(this ITable<JobQueue> table, string queue, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Queue == queue && e.Id == id, cancellationToken);
		}

		public static Server? Find(this ITable<Server> table, string id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Server?> FindAsync(this ITable<Server> table, string id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static List? Find(this ITable<List> table, string key, long id)
		{
			return table.FirstOrDefault(e => e.Key == key && e.Id == id);
		}

		public static Task<List?> FindAsync(this ITable<List> table, string key, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Key == key && e.Id == id, cancellationToken);
		}

		public static Set? Find(this ITable<Set> table, string key, string @value)
		{
			return table.FirstOrDefault(e => e.Key == key && e.Value == @value);
		}

		public static Task<Set?> FindAsync(this ITable<Set> table, string key, string @value, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Key == key && e.Value == @value, cancellationToken);
		}

		public static Hash? Find(this ITable<Hash> table, string key, string field)
		{
			return table.FirstOrDefault(e => e.Key == key && e.Field == field);
		}

		public static Task<Hash?> FindAsync(this ITable<Hash> table, string key, string field, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Key == key && e.Field == field, cancellationToken);
		}

		public static AggregatedCounter? Find(this ITable<AggregatedCounter> table, string key)
		{
			return table.FirstOrDefault(e => e.Key == key);
		}

		public static Task<AggregatedCounter?> FindAsync(this ITable<AggregatedCounter> table, string key, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Key == key, cancellationToken);
		}
		#endregion

		[Table("Schema", Schema = "hf")]
		public class Schema
		{
			[Column("Version", IsPrimaryKey = true)] public int Version { get; set; } // int
		}

		[Table("Job", Schema = "hf")]
		public class Job
		{
			[Column("Id"            , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public long      Id             { get; set; } // bigint
			[Column("StateId"                                                                                          )] public long?     StateId        { get; set; } // bigint
			[Column("StateName"                                                                                        )] public string?   StateName      { get; set; } // nvarchar(20)
			[Column("InvocationData", CanBeNull    = false                                                             )] public string    InvocationData { get; set; } = null!; // nvarchar(max)
			[Column("Arguments"     , CanBeNull    = false                                                             )] public string    Arguments      { get; set; } = null!; // nvarchar(max)
			[Column("CreatedAt"                                                                                        )] public DateTime  CreatedAt      { get; set; } // datetime
			[Column("ExpireAt"                                                                                         )] public DateTime? ExpireAt       { get; set; } // datetime

			#region Associations
			/// <summary>
			/// FK_HangFire_State_Job backreference
			/// </summary>
			[Association(ThisKey = nameof(Id), OtherKey = nameof(State.JobId))]
			public IEnumerable<State> HangFireStates { get; set; } = null!;

			/// <summary>
			/// FK_HangFire_JobParameter_Job backreference
			/// </summary>
			[Association(ThisKey = nameof(Id), OtherKey = nameof(JobParameter.JobId))]
			public IEnumerable<JobParameter> HangFireJobParameters { get; set; } = null!;
			#endregion
		}

		[Table("State", Schema = "hf")]
		public class State
		{
			[Column("Id"       , IsPrimaryKey = true , PrimaryKeyOrder = 1, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public long     Id        { get; set; } // bigint
			[Column("JobId"    , IsPrimaryKey = true , PrimaryKeyOrder = 0                                                             )] public long     JobId     { get; set; } // bigint
			[Column("Name"     , CanBeNull    = false                                                                                  )] public string   Name      { get; set; } = null!; // nvarchar(20)
			[Column("Reason"                                                                                                           )] public string?  Reason    { get; set; } // nvarchar(100)
			[Column("CreatedAt"                                                                                                        )] public DateTime CreatedAt { get; set; } // datetime
			[Column("Data"                                                                                                             )] public string?  Data      { get; set; } // nvarchar(max)

			#region Associations
			/// <summary>
			/// FK_HangFire_State_Job
			/// </summary>
			[Association(CanBeNull = false, ThisKey = nameof(JobId), OtherKey = nameof(HfSchema.Job.Id))]
			public Job Job { get; set; } = null!;
			#endregion
		}

		[Table("JobParameter", Schema = "hf")]
		public class JobParameter
		{
			[Column("JobId", IsPrimaryKey = true , PrimaryKeyOrder = 0                        )] public long    JobId { get; set; } // bigint
			[Column("Name" , CanBeNull    = false, IsPrimaryKey    = true, PrimaryKeyOrder = 1)] public string  Name  { get; set; } = null!; // nvarchar(40)
			[Column("Value"                                                                   )] public string? Value { get; set; } // nvarchar(max)

			#region Associations
			/// <summary>
			/// FK_HangFire_JobParameter_Job
			/// </summary>
			[Association(CanBeNull = false, ThisKey = nameof(JobId), OtherKey = nameof(HfSchema.Job.Id))]
			public Job Job { get; set; } = null!;
			#endregion
		}

		[Table("JobQueue", Schema = "hf")]
		public class JobQueue
		{
			[Column("Id"       , IsPrimaryKey = true , PrimaryKeyOrder = 1   , IsIdentity      = true, SkipOnInsert = true, SkipOnUpdate = true)] public long      Id        { get; set; } // bigint
			[Column("JobId"                                                                                                                    )] public long      JobId     { get; set; } // bigint
			[Column("Queue"    , CanBeNull    = false, IsPrimaryKey    = true, PrimaryKeyOrder = 0                                             )] public string    Queue     { get; set; } = null!; // nvarchar(50)
			[Column("FetchedAt"                                                                                                                )] public DateTime? FetchedAt { get; set; } // datetime
		}

		[Table("Server", Schema = "hf")]
		public class Server
		{
			[Column("Id"           , CanBeNull = false, IsPrimaryKey = true)] public string   Id            { get; set; } = null!; // nvarchar(200)
			[Column("Data"                                                 )] public string?  Data          { get; set; } // nvarchar(max)
			[Column("LastHeartbeat"                                        )] public DateTime LastHeartbeat { get; set; } // datetime
		}

		[Table("List", Schema = "hf")]
		public class List
		{
			[Column("Id"      , IsPrimaryKey = true , PrimaryKeyOrder = 1   , IsIdentity      = true, SkipOnInsert = true, SkipOnUpdate = true)] public long      Id       { get; set; } // bigint
			[Column("Key"     , CanBeNull    = false, IsPrimaryKey    = true, PrimaryKeyOrder = 0                                             )] public string    Key      { get; set; } = null!; // nvarchar(100)
			[Column("Value"                                                                                                                   )] public string?   Value    { get; set; } // nvarchar(max)
			[Column("ExpireAt"                                                                                                                )] public DateTime? ExpireAt { get; set; } // datetime
		}

		[Table("Set", Schema = "hf")]
		public class Set
		{
			[Column("Key"     , CanBeNull = false, IsPrimaryKey = true, PrimaryKeyOrder = 0)] public string    Key      { get; set; } = null!; // nvarchar(100)
			[Column("Score"                                                                )] public double    Score    { get; set; } // float
			[Column("Value"   , CanBeNull = false, IsPrimaryKey = true, PrimaryKeyOrder = 1)] public string    Value    { get; set; } = null!; // nvarchar(256)
			[Column("ExpireAt"                                                             )] public DateTime? ExpireAt { get; set; } // datetime
		}

		[Table("Counter", Schema = "hf")]
		public class Counter
		{
			[Column("Key"     , CanBeNull = false)] public string    Key      { get; set; } = null!; // nvarchar(100)
			[Column("Value"                      )] public int       Value    { get; set; } // int
			[Column("ExpireAt"                   )] public DateTime? ExpireAt { get; set; } // datetime
		}

		[Table("Hash", Schema = "hf")]
		public class Hash
		{
			[Column("Key"     , CanBeNull = false, IsPrimaryKey = true, PrimaryKeyOrder = 0)] public string    Key      { get; set; } = null!; // nvarchar(100)
			[Column("Field"   , CanBeNull = false, IsPrimaryKey = true, PrimaryKeyOrder = 1)] public string    Field    { get; set; } = null!; // nvarchar(100)
			[Column("Value"                                                                )] public string?   Value    { get; set; } // nvarchar(max)
			[Column("ExpireAt"                                                             )] public DateTime? ExpireAt { get; set; } // datetime2(7)
		}

		[Table("AggregatedCounter", Schema = "hf")]
		public class AggregatedCounter
		{
			[Column("Key"     , CanBeNull = false, IsPrimaryKey = true)] public string    Key      { get; set; } = null!; // nvarchar(100)
			[Column("Value"                                           )] public long      Value    { get; set; } // bigint
			[Column("ExpireAt"                                        )] public DateTime? ExpireAt { get; set; } // datetime
		}
	}
}
