// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Sheaft.Infrastructure.Persistence;

#nullable disable

namespace Sheaft.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Sheaft.Domain.BatchNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DDM")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DLC")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SupplierId", "Number")
                        .IsUnique();

                    b.ToTable("Batches", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Carts", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Catalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Catalogs", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.CatalogProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CatalogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("WholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("WholeSalePricePerUnit")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("ProductId");

                    b.ToTable("CatalogProductsPrices", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<bool>("OpenForNewContracts")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Companies", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.CompanyBilling", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentExigibleIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("CompanyId");

                    b.ToTable("CompanyBillings", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.CompanyDetails", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("CompanyDetails", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.CompanyLegals", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsExemptedFromVAT")
                        .HasColumnType("bit");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VATNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.HasIndex("Identifier")
                        .IsUnique();

                    b.ToTable("CompanyLegals", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.CompanySetting", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId", "SettingId");

                    b.HasIndex("SettingId");

                    b.ToTable("CompanySettings", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CatalogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DistributionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DistributionId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Contracts", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("BilledOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompletedDeliveryFormUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CompletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("DeliveryFeesWholeSalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("DeliveryFormSentOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeliveryReceiptUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InitialDeliveryFormUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ReceiptSentOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReceptionedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reference")
                        .HasColumnType("int");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ScheduledOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SupplierId", "Reference")
                        .IsUnique();

                    b.ToTable("Deliveries", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Distribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AcceptPurchaseOrdersWithAmountGreaterThan")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ApplyDeliveryFeesWhen")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal?>("DeliveryFeesMinPurchaseOrdersAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DeliveryFeesWholeSalePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAutoAcceptingPurchaseOrders")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutoCompletingPurchaseOrders")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<int?>("LockOrderHoursBeforeDelivery")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPurchaseOrdersPerTimeSlot")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Distributions", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Command")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CompletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<string>("ResultFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("StartedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Unread")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Observation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReplyToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("VisibleToAll")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ReplyToId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("Observations", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.PickingOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CompletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PickingFormUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PickingOrders", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Conditioning")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QuantityPerUnit")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ReturnableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("VisibleTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ReturnableId");

                    b.HasIndex("SupplierId", "Reference")
                        .IsUnique();

                    b.ToTable("Products", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AcceptedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CompletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DroppedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Reference");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Reference")
                        .IsUnique()
                        .HasFilter("[Reference] IS NOT NULL");

                    b.ToTable("PurchaseOrders", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.QuickOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuickOrders", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.ToTable("ProductRatings", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Recall", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("SaleEndedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("SaleStartedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("SendCompletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("SendingStartedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Recalls", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.RecallClient", b =>
                {
                    b.Property<Guid>("RecallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RecallSent")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RecallId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("RecallClients", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Returnable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("WholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Returnables", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.HasKey("Id");

                    b.HasIndex("Kind")
                        .IsUnique();

                    b.ToTable("Settings", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Tags", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("Sheaft.Domain.BatchNumber", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Sheaft.Domain.Cart", b =>
                {
                    b.HasOne("Sheaft.Domain.User", null)
                        .WithMany("Carts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("Sheaft.Domain.CartProduct", "Products", b1 =>
                        {
                            b1.Property<Guid>("CartId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<Guid>("SupplierId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("CartId", "Id");

                            b1.ToTable("CartProducts", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("CartId");
                        });

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Sheaft.Domain.CatalogProductPrice", b =>
                {
                    b.HasOne("Sheaft.Domain.Catalog", null)
                        .WithMany("Products")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Sheaft.Domain.Company", b =>
                {
                    b.OwnsOne("Sheaft.Domain.ShippingAddress", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<Point>("Location")
                                .HasColumnType("geography");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("Sheaft.Domain.CompanyBilling", b =>
                {
                    b.HasOne("Sheaft.Domain.Company", null)
                        .WithOne("Billing")
                        .HasForeignKey("Sheaft.Domain.CompanyBilling", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sheaft.Domain.BillingAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("CompanyBillingCompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CompanyBillingCompanyId");

                            b1.ToTable("CompanyBillings", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("CompanyBillingCompanyId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Sheaft.Domain.CompanyDetails", b =>
                {
                    b.HasOne("Sheaft.Domain.Company", null)
                        .WithOne("Details")
                        .HasForeignKey("Sheaft.Domain.CompanyDetails", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sheaft.Domain.BaseClass.CompanySchedule", "OpeningHours", b1 =>
                        {
                            b1.Property<Guid>("CompanyDetailsCompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("Day")
                                .HasColumnType("int");

                            b1.Property<TimeSpan>("From")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("To")
                                .HasColumnType("time");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("CompanyDetailsCompanyId", "Id");

                            b1.ToTable("CompanyDetailsOpeningHours", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("CompanyDetailsCompanyId");
                        });

                    b.OwnsMany("Sheaft.Domain.CompanyClosing", "Closings", b1 =>
                        {
                            b1.Property<Guid>("CompanyDetailsCompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id1")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id1"), 1L, 1);

                            b1.Property<DateTimeOffset>("ClosedFrom")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("ClosedTo")
                                .HasColumnType("datetimeoffset");

                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Reason")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<byte[]>("RowVersion")
                                .HasColumnType("varbinary(max)");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("CompanyDetailsCompanyId", "Id1");

                            b1.ToTable("CompanyDetailsClosings", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("CompanyDetailsCompanyId");
                        });

                    b.OwnsMany("Sheaft.Domain.CompanyPicture", "Pictures", b1 =>
                        {
                            b1.Property<Guid>("CompanyDetailsCompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("Position")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Url")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompanyDetailsCompanyId", "Id");

                            b1.ToTable("CompanyDetailsPictures", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("CompanyDetailsCompanyId");
                        });

                    b.OwnsMany("Sheaft.Domain.CompanyTag", "Tags", b1 =>
                        {
                            b1.Property<Guid>("CompanyDetailsCompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("TagId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CompanyDetailsCompanyId", "Id");

                            b1.HasIndex("TagId");

                            b1.ToTable("CompanyDetailsTags", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("CompanyDetailsCompanyId");

                            b1.HasOne("Sheaft.Domain.Tag", "Tag")
                                .WithMany()
                                .HasForeignKey("TagId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.Navigation("Tag");
                        });

                    b.Navigation("Closings");

                    b.Navigation("OpeningHours");

                    b.Navigation("Pictures");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Sheaft.Domain.CompanyLegals", b =>
                {
                    b.HasOne("Sheaft.Domain.Company", null)
                        .WithOne("Legals")
                        .HasForeignKey("Sheaft.Domain.CompanyLegals", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sheaft.Domain.LegalsAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("CompanyLegalsCompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CompanyLegalsCompanyId");

                            b1.ToTable("CompanyLegals", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("CompanyLegalsCompanyId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Sheaft.Domain.CompanySetting", b =>
                {
                    b.HasOne("Sheaft.Domain.Company", null)
                        .WithMany("Settings")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Setting", "Setting")
                        .WithMany()
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("Sheaft.Domain.Contract", b =>
                {
                    b.HasOne("Sheaft.Domain.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sheaft.Domain.Company", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Distribution", "Distribution")
                        .WithMany()
                        .HasForeignKey("DistributionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sheaft.Domain.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("Client");

                    b.Navigation("CreatedBy");

                    b.Navigation("Distribution");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sheaft.Domain.Delivery", b =>
                {
                    b.HasOne("Sheaft.Domain.Company", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sheaft.Domain.DeliveryAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("DeliveryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<Point>("Location")
                                .HasColumnType("geography");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("DeliveryId");

                            b1.ToTable("Deliveries", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryId");
                        });

                    b.OwnsMany("Sheaft.Domain.DeliveryProduct", "Products", b1 =>
                        {
                            b1.Property<Guid>("DeliveryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int?>("DeliveredQuantity")
                                .HasColumnType("int");

                            b1.Property<int>("ExpectedQuantity")
                                .HasColumnType("int");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("ReturnableId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DeliveryId", "Id");

                            b1.ToTable("DeliveryProducts", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryId");
                        });

                    b.OwnsMany("Sheaft.Domain.DeliveryReturnable", "PickedUpReturnables", b1 =>
                        {
                            b1.Property<Guid>("DeliveryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("PickedUpQuantity")
                                .HasColumnType("int");

                            b1.Property<Guid>("ReturnableId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("DeliveryId", "Id");

                            b1.ToTable("DeliveryPickedUpReturnables", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("PickedUpReturnables");

                    b.Navigation("Products");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sheaft.Domain.Distribution", b =>
                {
                    b.HasOne("Sheaft.Domain.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sheaft.Domain.BaseClass.DistributionSchedule", "OpeningHours", b1 =>
                        {
                            b1.Property<Guid>("DistributionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("Day")
                                .HasColumnType("int");

                            b1.Property<TimeSpan>("From")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("To")
                                .HasColumnType("time");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("DistributionId", "Id");

                            b1.ToTable("DistributionOpeningHours", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("DistributionId");
                        });

                    b.OwnsOne("Sheaft.Domain.DistributionAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("DistributionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<Point>("Location")
                                .HasColumnType("geography");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("DistributionId");

                            b1.ToTable("Distributions", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("DistributionId");
                        });

                    b.OwnsMany("Sheaft.Domain.DistributionClosing", "Closings", b1 =>
                        {
                            b1.Property<Guid>("DistributionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id1")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id1"), 1L, 1);

                            b1.Property<DateTimeOffset>("ClosedFrom")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("ClosedTo")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Reason")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("DistributionId", "Id1");

                            b1.ToTable("DistributionClosings", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("DistributionId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Closings");

                    b.Navigation("OpeningHours");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sheaft.Domain.Job", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sheaft.Domain.Notification", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sheaft.Domain.Observation", b =>
                {
                    b.HasOne("Sheaft.Domain.Observation", null)
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sheaft.Domain.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsMany("Sheaft.Domain.ObservationBatchNumber", "BatchNumbers", b1 =>
                        {
                            b1.Property<Guid>("ObservationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<Guid>("BatchNumberId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("ObservationId", "Id");

                            b1.HasIndex("BatchNumberId");

                            b1.ToTable("ObservationBatchNumbers", "dbo");

                            b1.HasOne("Sheaft.Domain.BatchNumber", null)
                                .WithMany()
                                .HasForeignKey("BatchNumberId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ObservationId");
                        });

                    b.OwnsMany("Sheaft.Domain.ObservationProduct", "Products", b1 =>
                        {
                            b1.Property<Guid>("ObservationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id1")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id1"), 1L, 1);

                            b1.Property<int>("Conditioning")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Picture")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("QuantityPerUnit")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Reference")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Unit")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("ObservationId", "Id1");

                            b1.ToTable("ObservationProducts", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("ObservationId");
                        });

                    b.Navigation("BatchNumbers");

                    b.Navigation("Products");

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sheaft.Domain.PickingOrder", b =>
                {
                    b.HasOne("Sheaft.Domain.Delivery", null)
                        .WithMany("Pickings")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("Sheaft.Domain.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sheaft.Domain.PickingProduct", "Products", b1 =>
                        {
                            b1.Property<Guid>("PickingOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int?>("PreparedQuantity")
                                .HasColumnType("int");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("PurchaseOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("PickingOrderId", "Id");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("PurchaseOrderId");

                            b1.ToTable("PickingOrderProducts", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("PickingOrderId");

                            b1.OwnsMany("Sheaft.Domain.PickingBatchNumber", "BatchNumbers", b2 =>
                                {
                                    b2.Property<Guid>("PickingProductPickingOrderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("PickingProductId")
                                        .HasColumnType("int");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"), 1L, 1);

                                    b2.Property<Guid>("BatchNumberId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("PickingProductPickingOrderId", "PickingProductId", "Id");

                                    b2.HasIndex("BatchNumberId");

                                    b2.ToTable("PickingOrderProductBatchNumbers", "dbo");

                                    b2.WithOwner()
                                        .HasForeignKey("PickingProductPickingOrderId", "PickingProductId");
                                });

                            b1.Navigation("BatchNumbers");
                        });

                    b.Navigation("Products");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sheaft.Domain.Product", b =>
                {
                    b.HasOne("Sheaft.Domain.Returnable", "Returnable")
                        .WithMany()
                        .HasForeignKey("ReturnableId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Sheaft.Domain.Company", null)
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sheaft.Domain.ProductPicture", "Pictures", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("Position")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Url")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductId", "Id");

                            b1.ToTable("ProductPictures", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsMany("Sheaft.Domain.ProductTag", "Tags", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<Guid>("TagId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("ProductId", "Id");

                            b1.HasIndex("TagId");

                            b1.ToTable("ProductTags", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasOne("Sheaft.Domain.Tag", "Tag")
                                .WithMany()
                                .HasForeignKey("TagId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("Tag");
                        });

                    b.Navigation("Pictures");

                    b.Navigation("Returnable");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Sheaft.Domain.PurchaseOrder", b =>
                {
                    b.OwnsOne("Sheaft.Domain.PurchaseOrderDelivery", "ExpectedDelivery", b1 =>
                        {
                            b1.Property<Guid>("PurchaseOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("DeliveryFeesWholeSalePrice")
                                .HasColumnType("decimal(10,2)");

                            b1.Property<Guid>("DistributionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("ExpectedDeliveryDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<TimeSpan>("From")
                                .HasColumnType("time");

                            b1.Property<TimeSpan>("To")
                                .HasColumnType("time");

                            b1.HasKey("PurchaseOrderId");

                            b1.ToTable("PurchaseOrders", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseOrderId");

                            b1.OwnsOne("Sheaft.Domain.PurchaseOrderDeliveryAddress", "Address", b2 =>
                                {
                                    b2.Property<Guid>("PurchaseOrderDeliveryPurchaseOrderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<double?>("Latitude")
                                        .HasColumnType("float");

                                    b2.Property<double?>("Longitude")
                                        .HasColumnType("float");

                                    b2.HasKey("PurchaseOrderDeliveryPurchaseOrderId");

                                    b2.ToTable("PurchaseOrders", "dbo");

                                    b2.WithOwner()
                                        .HasForeignKey("PurchaseOrderDeliveryPurchaseOrderId");
                                });

                            b1.Navigation("Address");
                        });

                    b.OwnsMany("Sheaft.Domain.PurchaseOrderLine", "Lines", b1 =>
                        {
                            b1.Property<Guid>("PurchaseOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<int>("Conditioning")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<decimal>("QuantityPerUnit")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Reference")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Unit")
                                .HasColumnType("int");

                            b1.Property<decimal>("Vat")
                                .HasColumnType("decimal(10,2)");

                            b1.Property<decimal>("Weight")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("WholeSalePrice")
                                .HasColumnType("decimal(10,2)");

                            b1.Property<decimal>("WholeSalePricePerUnit")
                                .HasColumnType("decimal(10,2)");

                            b1.HasKey("PurchaseOrderId", "Id");

                            b1.ToTable("PurchaseOrderLines", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseOrderId");
                        });

                    b.OwnsOne("Sheaft.Domain.Sender", "Sender", b1 =>
                        {
                            b1.Property<Guid>("PurchaseOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("CompanyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PurchaseOrderId");

                            b1.ToTable("PurchaseOrders", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseOrderId");
                        });

                    b.OwnsOne("Sheaft.Domain.Vendor", "Vendor", b1 =>
                        {
                            b1.Property<Guid>("PurchaseOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PurchaseOrderId");

                            b1.ToTable("PurchaseOrders", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseOrderId");
                        });

                    b.Navigation("ExpectedDelivery");

                    b.Navigation("Lines");

                    b.Navigation("Sender");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Sheaft.Domain.QuickOrder", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sheaft.Domain.QuickOrderProduct", "Products", b1 =>
                        {
                            b1.Property<Guid>("QuickOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<Guid>("CatalogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("Quantity")
                                .HasColumnType("int");

                            b1.HasKey("QuickOrderId", "Id");

                            b1.HasIndex("CatalogId");

                            b1.ToTable("QuickOrderProducts", "dbo");

                            b1.HasOne("Sheaft.Domain.Catalog", null)
                                .WithMany()
                                .HasForeignKey("CatalogId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("Sheaft.Domain.Product", null)
                                .WithMany()
                                .HasForeignKey("CatalogId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("QuickOrderId");
                        });

                    b.Navigation("Products");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sheaft.Domain.Rating", b =>
                {
                    b.HasOne("Sheaft.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Product", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId1");
                });

            modelBuilder.Entity("Sheaft.Domain.Recall", b =>
                {
                    b.HasOne("Sheaft.Domain.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sheaft.Domain.RecallBatchNumber", "Batches", b1 =>
                        {
                            b1.Property<Guid>("RecallId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<Guid>("BatchNumberId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("RecallId", "Id");

                            b1.HasIndex("BatchNumberId");

                            b1.ToTable("RecallBatchNumbers", "dbo");

                            b1.HasOne("Sheaft.Domain.BatchNumber", null)
                                .WithMany()
                                .HasForeignKey("BatchNumberId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("RecallId");
                        });

                    b.OwnsMany("Sheaft.Domain.RecallProduct", "Products", b1 =>
                        {
                            b1.Property<Guid>("RecallId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id1")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id1"), 1L, 1);

                            b1.Property<int>("Conditioning")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Picture")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("QuantityPerUnit")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Reference")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Unit")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("UpdatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("RecallId", "Id1");

                            b1.ToTable("RecallProducts", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("RecallId");
                        });

                    b.Navigation("Batches");

                    b.Navigation("Products");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sheaft.Domain.RecallClient", b =>
                {
                    b.HasOne("Sheaft.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Recall", null)
                        .WithMany("Clients")
                        .HasForeignKey("RecallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sheaft.Domain.Returnable", b =>
                {
                    b.HasOne("Sheaft.Domain.Company", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Sheaft.Domain.User", b =>
                {
                    b.OwnsOne("Sheaft.Domain.UserAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<Point>("Location")
                                .HasColumnType("geography");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "dbo");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Sheaft.Domain.Catalog", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Sheaft.Domain.Company", b =>
                {
                    b.Navigation("Billing");

                    b.Navigation("Details");

                    b.Navigation("Legals");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Sheaft.Domain.Delivery", b =>
                {
                    b.Navigation("Pickings");
                });

            modelBuilder.Entity("Sheaft.Domain.Observation", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Sheaft.Domain.Product", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Sheaft.Domain.Recall", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Sheaft.Domain.User", b =>
                {
                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
