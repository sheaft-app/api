// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Sheaft.Infrastructure.Persistence;

namespace Sheaft.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(QueryDbContext))]
    [Migration("20210618133949_DeliveryBatches")]
    partial class DeliveryBatches
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sheaft.Domain.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CatalogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreatedByKind")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeliveryModeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("DeliveryModeId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("Sheaft.Domain.BusinessClosing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ClosedFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ClosedTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessClosings");
                });

            modelBuilder.Entity("Sheaft.Domain.Catalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductsCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProducerId");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("Sheaft.Domain.CatalogProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CatalogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("OnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("OnSalePricePerUnit")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("VatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("VatPricePerUnit")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("WholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("WholeSalePricePerUnit")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("ProductId");

                    b.ToTable("CatalogProducts");
                });

            modelBuilder.Entity("Sheaft.Domain.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alpha2")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.HasKey("Id");

                    b.HasIndex("Alpha2")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Sheaft.Domain.Declaration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReasonCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UbosCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Identifier");

                    b.ToTable("Declarations");
                });

            modelBuilder.Entity("Sheaft.Domain.DeliveryBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("CompletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("DeliveriesCount")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<int>("ProductsCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset>("ScheduledOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("StartedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.ToTable("DeliveryBatches");
                });

            modelBuilder.Entity("Sheaft.Domain.DeliveryClosing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ClosedFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ClosedTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DeliveryModeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryModeId");

                    b.ToTable("DeliveryClosings");
                });

            modelBuilder.Entity("Sheaft.Domain.DeliveryHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<Guid>("DeliveryModeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryModeId");

                    b.ToTable("DeliveryHours");
                });

            modelBuilder.Entity("Sheaft.Domain.DeliveryMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoAcceptRelatedPurchaseOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoCompleteRelatedPurchaseOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("ClosingsCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DeliveryHoursCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<int?>("LockOrderHoursBeforeDelivery")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPurchaseOrdersPerTimeSlot")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProducerId");

                    b.ToTable("DeliveryModes");
                });

            modelBuilder.Entity("Sheaft.Domain.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConsumersCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("LevelId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ProducersCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RequiredProducers")
                        .HasColumnType("int");

                    b.Property<int>("StoresCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("LevelId");

                    b.HasIndex("RegionId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Sheaft.Domain.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<Guid>("LegalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PagesCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResultCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Identifier");

                    b.HasIndex("LegalId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Sheaft.Domain.Donation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Credited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("CreditedWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Debited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("DebitedWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ExecutedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResultCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreditedWalletId");

                    b.HasIndex("DebitedWalletId");

                    b.HasIndex("Identifier");

                    b.HasIndex("OrderId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("Sheaft.Domain.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("Command")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CompletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<string>("Queue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Retried")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("StartedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Sheaft.Domain.Legal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserKind")
                        .HasColumnType("int");

                    b.Property<int>("Validation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Legals");

                    b.HasDiscriminator<int>("UserKind");
                });

            modelBuilder.Entity("Sheaft.Domain.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RequiredPoints")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Sheaft.Domain.Nationality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alpha2")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Alpha2")
                        .IsUnique();

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Sheaft.Domain.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Unread")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Sheaft.Domain.OpeningHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("Sheaft.Domain.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DeliveriesCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Donation")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Donate");

                    b.Property<decimal>("DonationFeesPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("InternalFeesPrice");

                    b.Property<int>("DonationKind")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExpiredOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("FeesFixedAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("FeesPercent")
                        .HasColumnType("decimal(10,4)");

                    b.Property<decimal>("FeesPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("FeesVatPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("LinesCount")
                        .HasColumnType("int");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<int>("ProductsCount")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrdersCount")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ReturnablesCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalProductOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalProductVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalProductWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalReturnableOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalReturnableVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalReturnableWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalWeight")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Sheaft.Domain.OrderDelivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<Guid>("DeliveryModeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ExpectedDeliveryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryModeId");

                    b.HasIndex("OrderId", "DeliveryModeId")
                        .IsUnique();

                    b.ToTable("OrderDeliveries");
                });

            modelBuilder.Entity("Sheaft.Domain.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ReturnableOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ReturnableVat")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ReturnableVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ReturnableWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ReturnablesCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalProductOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalProductVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalProductWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("TotalReturnableOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("TotalReturnableVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("TotalReturnableWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("TotalWeight")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("UnitWeight")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProducerId");

                    b.HasIndex("OrderId", "ProductId")
                        .IsUnique();

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Sheaft.Domain.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UploadedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentPages");
                });

            modelBuilder.Entity("Sheaft.Domain.Payin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Credited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("CreditedWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Debited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset?>("ExecutedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefundsCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResultCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreditedWalletId");

                    b.HasIndex("Identifier");

                    b.HasIndex("OrderId");

                    b.ToTable("Payins");

                    b.HasDiscriminator<int>("Kind");
                });

            modelBuilder.Entity("Sheaft.Domain.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Identifier");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethods");

                    b.HasDiscriminator<int>("Kind");
                });

            modelBuilder.Entity("Sheaft.Domain.Payout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Credited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Debited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("DebitedWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ExecutedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResultCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TransfersCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("WithholdingsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("DebitedWalletId");

                    b.HasIndex("Identifier");

                    b.ToTable("Payouts");
                });

            modelBuilder.Entity("Sheaft.Domain.PreAuthorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Debited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("PreAuthorizedPayinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Remaining")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResultCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("SecureModeNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("SecureModeRedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecureModeReturnURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("Identifier");

                    b.HasIndex("OrderId");

                    b.HasIndex("PreAuthorizedPayinId")
                        .IsUnique()
                        .HasFilter("[PreAuthorizedPayinId] IS NOT NULL");

                    b.ToTable("PreAuthorizations");
                });

            modelBuilder.Entity("Sheaft.Domain.ProducerTag", b =>
                {
                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProducerId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProducerTags");
                });

            modelBuilder.Entity("Sheaft.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("CatalogsPricesCount")
                        .HasColumnType("int");

                    b.Property<int>("Conditioning")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PicturesCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("QuantityPerUnit")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("RatingsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ReturnableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TagsCount")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("VisibleTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ReturnableId");

                    b.HasIndex("ProducerId", "Reference")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Sheaft.Domain.ProductPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPictures");
                });

            modelBuilder.Entity("Sheaft.Domain.ProductTag", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("Sheaft.Domain.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("Sheaft.Domain.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AcceptedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CompletedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DroppedOn")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("WithdrawnOn");

                    b.Property<int>("LinesCount")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductsCount")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ReturnablesCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalProductOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalProductVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalProductWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalReturnableOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalReturnableVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalReturnableWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalWeight")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProducerId", "Reference")
                        .IsUnique();

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Sheaft.Domain.PurchaseOrderDelivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeliveredOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("DeliveryBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeliveryModeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ExpectedDeliveryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceptionedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryBatchId");

                    b.HasIndex("DeliveryModeId");

                    b.HasIndex("PurchaseOrderId")
                        .IsUnique();

                    b.ToTable("PurchaseOrderDeliveries");
                });

            modelBuilder.Entity("Sheaft.Domain.PurchaseOrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReturnableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ReturnableOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ReturnableVat")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ReturnableVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("ReturnableWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ReturnablesCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("TotalOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalProductOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalProductVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalProductWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("TotalReturnableOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("TotalReturnableVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("TotalReturnableWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("TotalWeight")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("TotalWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitOnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitVatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("UnitWeight")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitWholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId", "ProductId")
                        .IsUnique();

                    b.ToTable("PurchaseOrderProducts");
                });

            modelBuilder.Entity("Sheaft.Domain.QuickOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<int>("ProductsCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("QuickOrders");
                });

            modelBuilder.Entity("Sheaft.Domain.QuickOrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CatalogProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("QuickOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CatalogProductId");

                    b.HasIndex("QuickOrderId", "CatalogProductId")
                        .IsUnique();

                    b.ToTable("QuickOrderProducts");
                });

            modelBuilder.Entity("Sheaft.Domain.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Sheaft.Domain.Refund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Credited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Debited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("DebitedWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ExecutedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResultCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DebitedWalletId");

                    b.HasIndex("Identifier");

                    b.ToTable("Refunds");

                    b.HasDiscriminator<int>("Kind");
                });

            modelBuilder.Entity("Sheaft.Domain.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConsumersCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ProducersCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("RequiredProducers")
                        .HasColumnType("int");

                    b.Property<int>("StoresCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Sheaft.Domain.Returnable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kind")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OnSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("VatPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("WholeSalePrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProducerId");

                    b.ToTable("Returnables");
                });

            modelBuilder.Entity("Sheaft.Domain.Reward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LevelId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("Sheaft.Domain.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Kind")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Sheaft.Domain.Sponsoring", b =>
                {
                    b.Property<Guid>("SponsorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SponsoredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SponsorId", "SponsoredId");

                    b.HasIndex("SponsoredId");

                    b.ToTable("Sponsorings");
                });

            modelBuilder.Entity("Sheaft.Domain.StoreTag", b =>
                {
                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StoreId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("StoreTags");
                });

            modelBuilder.Entity("Sheaft.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Sheaft.Domain.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Credited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("CreditedWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Debited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("DebitedWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ExecutedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<Guid?>("PayoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResultCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreditedWalletId");

                    b.HasIndex("DebitedWalletId");

                    b.HasIndex("Identifier");

                    b.HasIndex("PayoutId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("Sheaft.Domain.Ubo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DeclarationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nationality")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DeclarationId");

                    b.HasIndex("Identifier");

                    b.ToTable("DeclarationUbos");
                });

            modelBuilder.Entity("Sheaft.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_general_CI_AI");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PicturesCount")
                        .HasColumnType("int");

                    b.Property<int>("PointsCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SettingsCount")
                        .HasColumnType("int");

                    b.Property<string>("SponsorshipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Identifier");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("Kind");
                });

            modelBuilder.Entity("Sheaft.Domain.UserPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPoints");
                });

            modelBuilder.Entity("Sheaft.Domain.UserSetting", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "SettingId");

                    b.HasIndex("SettingId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Sheaft.Domain.Views.ConsumerProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OnSalePricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("ConsumerProducts");
                });

            modelBuilder.Entity("Sheaft.Domain.Views.CountryPoints", b =>
                {
                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Users")
                        .HasColumnType("int");

                    b.ToView("PointsPerCountry");
                });

            modelBuilder.Entity("Sheaft.Domain.Views.CountryUserPoints", b =>
                {
                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToView("UserPointsPerCountry");
                });

            modelBuilder.Entity("Sheaft.Domain.Views.DepartmentPoints", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Users")
                        .HasColumnType("int");

                    b.ToView("PointsPerDepartment");
                });

            modelBuilder.Entity("Sheaft.Domain.Views.DepartmentProducers", b =>
                {
                    b.Property<int?>("Active")
                        .HasColumnType("int");

                    b.Property<int?>("Created")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("ProducersPerDepartment");
                });

            modelBuilder.Entity("Sheaft.Domain.Views.DepartmentStores", b =>
                {
                    b.Property<int?>("Active")
                        .HasColumnType("int");

                    b.Property<int?>("Created")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("StoresPerDepartment");
                });

            modelBuilder.Entity("Sheaft.Domain.Views.DepartmentUserPoints", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToView("UserPointsPerDepartment");
                });

            modelBuilder.Entity("Sheaft.Domain.Views.RegionPoints", b =>
                {
                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Users")
                        .HasColumnType("int");

                    b.ToView("PointsPerRegion");
                });

            modelBuilder.Entity("Sheaft.Domain.Views.RegionUserPoints", b =>
                {
                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.ToView("UserPointsPerRegion");
                });

            modelBuilder.Entity("Sheaft.Domain.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ExternalUpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Identifier");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Sheaft.Domain.Withholding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Credited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("CreditedWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Debited")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("DebitedWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ExecutedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<Guid?>("PayoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RemovedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResultCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreditedWalletId");

                    b.HasIndex("DebitedWalletId");

                    b.HasIndex("Identifier");

                    b.HasIndex("PayoutId");

                    b.ToTable("Withholdings");
                });

            modelBuilder.Entity("Sheaft.Domain.BusinessLegal", b =>
                {
                    b.HasBaseType("Sheaft.Domain.Legal");

                    b.Property<Guid?>("DeclarationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Siret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("DeclarationId")
                        .IsUnique()
                        .HasFilter("[DeclarationId] IS NOT NULL");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Sheaft.Domain.ConsumerLegal", b =>
                {
                    b.HasBaseType("Sheaft.Domain.Legal");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Sheaft.Domain.PreAuthorizedPayin", b =>
                {
                    b.HasBaseType("Sheaft.Domain.Payin");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Sheaft.Domain.WebPayin", b =>
                {
                    b.HasBaseType("Sheaft.Domain.Payin");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Sheaft.Domain.BankAccount", b =>
                {
                    b.HasBaseType("Sheaft.Domain.PaymentMethod");

                    b.Property<string>("BIC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Sheaft.Domain.Card", b =>
                {
                    b.HasBaseType("Sheaft.Domain.PaymentMethod");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Sheaft.Domain.PayinRefund", b =>
                {
                    b.HasBaseType("Sheaft.Domain.Refund");

                    b.Property<Guid>("PayinId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PayinId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasDiscriminator().HasValue(300);
                });

            modelBuilder.Entity("Sheaft.Domain.Admin", b =>
                {
                    b.HasBaseType("Sheaft.Domain.User");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Sheaft.Domain.Business", b =>
                {
                    b.HasBaseType("Sheaft.Domain.User");

                    b.Property<int>("ClosingsCount")
                        .HasColumnType("int");

                    b.Property<bool>("OpenForNewBusiness")
                        .HasColumnType("bit");
                });

            modelBuilder.Entity("Sheaft.Domain.Consumer", b =>
                {
                    b.HasBaseType("Sheaft.Domain.User");

                    b.Property<bool>("Anonymous")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Sheaft.Domain.Support", b =>
                {
                    b.HasBaseType("Sheaft.Domain.User");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Sheaft.Domain.Producer", b =>
                {
                    b.HasBaseType("Sheaft.Domain.Business");

                    b.Property<bool>("CanDirectSell")
                        .HasColumnType("bit");

                    b.Property<bool>("HasProducts")
                        .HasColumnType("bit");

                    b.Property<bool>("NotSubjectToVat")
                        .HasColumnType("bit");

                    b.Property<int>("TagsCount")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Sheaft.Domain.Store", b =>
                {
                    b.HasBaseType("Sheaft.Domain.Business");

                    b.Property<int>("OpeningHoursCount")
                        .HasColumnType("int");

                    b.Property<int>("TagsCount")
                        .HasColumnType("int")
                        .HasColumnName("Store_TagsCount");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Sheaft.Domain.Agreement", b =>
                {
                    b.HasOne("Sheaft.Domain.Catalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Sheaft.Domain.DeliveryMode", "DeliveryMode")
                        .WithMany("Agreements")
                        .HasForeignKey("DeliveryModeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Sheaft.Domain.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("DeliveryMode");

                    b.Navigation("Producer");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Sheaft.Domain.BusinessClosing", b =>
                {
                    b.HasOne("Sheaft.Domain.Business", null)
                        .WithMany("Closings")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sheaft.Domain.Catalog", b =>
                {
                    b.HasOne("Sheaft.Domain.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Sheaft.Domain.CatalogProduct", b =>
                {
                    b.HasOne("Sheaft.Domain.Catalog", "Catalog")
                        .WithMany("Products")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Product", "Product")
                        .WithMany("CatalogsPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalog");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Sheaft.Domain.DeliveryBatch", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");
                });

            modelBuilder.Entity("Sheaft.Domain.DeliveryClosing", b =>
                {
                    b.HasOne("Sheaft.Domain.DeliveryMode", null)
                        .WithMany("Closings")
                        .HasForeignKey("DeliveryModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sheaft.Domain.DeliveryHours", b =>
                {
                    b.HasOne("Sheaft.Domain.DeliveryMode", null)
                        .WithMany("DeliveryHours")
                        .HasForeignKey("DeliveryModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sheaft.Domain.DeliveryMode", b =>
                {
                    b.HasOne("Sheaft.Domain.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sheaft.Domain.DeliveryAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("DeliveryModeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Country")
                                .HasColumnType("int");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<string>("Line1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Line2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Point>("Location")
                                .HasColumnType("geography");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("Zipcode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DeliveryModeId");

                            b1.ToTable("DeliveryModes");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryModeId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Sheaft.Domain.Department", b =>
                {
                    b.HasOne("Sheaft.Domain.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Sheaft.Domain.Document", b =>
                {
                    b.HasOne("Sheaft.Domain.Legal", null)
                        .WithMany("Documents")
                        .HasForeignKey("LegalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sheaft.Domain.Donation", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Wallet", "CreditedWallet")
                        .WithMany()
                        .HasForeignKey("CreditedWalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Wallet", "DebitedWallet")
                        .WithMany()
                        .HasForeignKey("DebitedWalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("CreditedWallet");

                    b.Navigation("DebitedWallet");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Sheaft.Domain.Job", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sheaft.Domain.Legal", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "User")
                        .WithOne("Legal")
                        .HasForeignKey("Sheaft.Domain.Legal", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sheaft.Domain.Owner", "Owner", b1 =>
                        {
                            b1.Property<Guid>("LegalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTimeOffset>("BirthDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int>("CountryOfResidence")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Nationality")
                                .HasColumnType("int");

                            b1.Property<byte[]>("RowVersion")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion");

                            b1.HasKey("LegalId");

                            b1.ToTable("Legals");

                            b1.WithOwner()
                                .HasForeignKey("LegalId");

                            b1.OwnsOne("Sheaft.Domain.OwnerAddress", "Address", b2 =>
                                {
                                    b2.Property<Guid>("OwnerLegalId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("City")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("Country")
                                        .HasColumnType("int");

                                    b2.Property<string>("Line1")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Line2")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<byte[]>("RowVersion")
                                        .IsConcurrencyToken()
                                        .ValueGeneratedOnAddOrUpdate()
                                        .HasColumnType("rowversion");

                                    b2.Property<string>("Zipcode")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("OwnerLegalId");

                                    b2.ToTable("Legals");

                                    b2.WithOwner()
                                        .HasForeignKey("OwnerLegalId");
                                });

                            b1.Navigation("Address");
                        });

                    b.Navigation("Owner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sheaft.Domain.Notification", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sheaft.Domain.OpeningHours", b =>
                {
                    b.HasOne("Sheaft.Domain.Store", null)
                        .WithMany("OpeningHours")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sheaft.Domain.Order", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sheaft.Domain.OrderDelivery", b =>
                {
                    b.HasOne("Sheaft.Domain.DeliveryMode", "DeliveryMode")
                        .WithMany()
                        .HasForeignKey("DeliveryModeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Order", null)
                        .WithMany("Deliveries")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryMode");
                });

            modelBuilder.Entity("Sheaft.Domain.OrderProduct", b =>
                {
                    b.HasOne("Sheaft.Domain.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.User", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Sheaft.Domain.Page", b =>
                {
                    b.HasOne("Sheaft.Domain.Document", null)
                        .WithMany("Pages")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sheaft.Domain.Payin", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Wallet", "CreditedWallet")
                        .WithMany()
                        .HasForeignKey("CreditedWalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("CreditedWallet");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Sheaft.Domain.PaymentMethod", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sheaft.Domain.Payout", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Wallet", "DebitedWallet")
                        .WithMany()
                        .HasForeignKey("DebitedWalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BankAccount");

                    b.Navigation("DebitedWallet");
                });

            modelBuilder.Entity("Sheaft.Domain.PreAuthorization", b =>
                {
                    b.HasOne("Sheaft.Domain.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.PreAuthorizedPayin", "PreAuthorizedPayin")
                        .WithOne()
                        .HasForeignKey("Sheaft.Domain.PreAuthorization", "PreAuthorizedPayinId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Card");

                    b.Navigation("Order");

                    b.Navigation("PreAuthorizedPayin");
                });

            modelBuilder.Entity("Sheaft.Domain.ProducerTag", b =>
                {
                    b.HasOne("Sheaft.Domain.Producer", null)
                        .WithMany("Tags")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Sheaft.Domain.Product", b =>
                {
                    b.HasOne("Sheaft.Domain.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Returnable", "Returnable")
                        .WithMany()
                        .HasForeignKey("ReturnableId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Producer");

                    b.Navigation("Returnable");
                });

            modelBuilder.Entity("Sheaft.Domain.ProductPicture", b =>
                {
                    b.HasOne("Sheaft.Domain.Product", null)
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sheaft.Domain.ProductTag", b =>
                {
                    b.HasOne("Sheaft.Domain.Product", null)
                        .WithMany("Tags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Sheaft.Domain.ProfilePicture", b =>
                {
                    b.HasOne("Sheaft.Domain.User", null)
                        .WithMany("Pictures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sheaft.Domain.PurchaseOrder", b =>
                {
                    b.HasOne("Sheaft.Domain.Order", null)
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Sheaft.Domain.PurchaseOrderSender", "SenderInfo", b1 =>
                        {
                            b1.Property<Guid>("PurchaseOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Kind")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .UseCollation("Latin1_general_CI_AI");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Picture")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PurchaseOrderId");

                            b1.ToTable("PurchaseOrders");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseOrderId");
                        });

                    b.OwnsOne("Sheaft.Domain.PurchaseOrderVendor", "VendorInfo", b1 =>
                        {
                            b1.Property<Guid>("PurchaseOrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Kind")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .UseCollation("Latin1_general_CI_AI");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Picture")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PurchaseOrderId");

                            b1.ToTable("PurchaseOrders");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseOrderId");
                        });

                    b.Navigation("SenderInfo");

                    b.Navigation("VendorInfo");
                });

            modelBuilder.Entity("Sheaft.Domain.PurchaseOrderDelivery", b =>
                {
                    b.HasOne("Sheaft.Domain.DeliveryBatch", "DeliveryBatch")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryBatchId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Sheaft.Domain.DeliveryMode", "DeliveryMode")
                        .WithMany()
                        .HasForeignKey("DeliveryModeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.PurchaseOrder", "PurchaseOrder")
                        .WithOne("Delivery")
                        .HasForeignKey("Sheaft.Domain.PurchaseOrderDelivery", "PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sheaft.Domain.ExpectedAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("PurchaseOrderDeliveryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Country")
                                .HasColumnType("int");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<string>("Line1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Line2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("Zipcode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PurchaseOrderDeliveryId");

                            b1.ToTable("PurchaseOrderDeliveries");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseOrderDeliveryId");
                        });

                    b.Navigation("Address");

                    b.Navigation("DeliveryBatch");

                    b.Navigation("DeliveryMode");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Sheaft.Domain.PurchaseOrderProduct", b =>
                {
                    b.HasOne("Sheaft.Domain.PurchaseOrder", null)
                        .WithMany("Products")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sheaft.Domain.QuickOrder", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sheaft.Domain.QuickOrderProduct", b =>
                {
                    b.HasOne("Sheaft.Domain.CatalogProduct", "CatalogProduct")
                        .WithMany()
                        .HasForeignKey("CatalogProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.QuickOrder", null)
                        .WithMany("Products")
                        .HasForeignKey("QuickOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CatalogProduct");
                });

            modelBuilder.Entity("Sheaft.Domain.Rating", b =>
                {
                    b.HasOne("Sheaft.Domain.Product", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sheaft.Domain.Refund", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Wallet", "DebitedWallet")
                        .WithMany()
                        .HasForeignKey("DebitedWalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("DebitedWallet");
                });

            modelBuilder.Entity("Sheaft.Domain.Returnable", b =>
                {
                    b.HasOne("Sheaft.Domain.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Sheaft.Domain.Reward", b =>
                {
                    b.HasOne("Sheaft.Domain.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Level", "Level")
                        .WithMany("Rewards")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.User", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Department");

                    b.Navigation("Level");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Sheaft.Domain.Sponsoring", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.User", "Sponsored")
                        .WithMany()
                        .HasForeignKey("SponsoredId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sponsor");

                    b.Navigation("Sponsored");
                });

            modelBuilder.Entity("Sheaft.Domain.StoreTag", b =>
                {
                    b.HasOne("Sheaft.Domain.Store", null)
                        .WithMany("Tags")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Sheaft.Domain.Transfer", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Wallet", "CreditedWallet")
                        .WithMany()
                        .HasForeignKey("CreditedWalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Wallet", "DebitedWallet")
                        .WithMany()
                        .HasForeignKey("DebitedWalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Payout", "Payout")
                        .WithMany("Transfers")
                        .HasForeignKey("PayoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Sheaft.Domain.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("CreditedWallet");

                    b.Navigation("DebitedWallet");

                    b.Navigation("Payout");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Sheaft.Domain.Ubo", b =>
                {
                    b.HasOne("Sheaft.Domain.Declaration", null)
                        .WithMany("Ubos")
                        .HasForeignKey("DeclarationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sheaft.Domain.BirthAddress", "BirthPlace", b1 =>
                        {
                            b1.Property<Guid>("UboId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Country")
                                .HasColumnType("int");

                            b1.HasKey("UboId");

                            b1.ToTable("DeclarationUbos");

                            b1.WithOwner()
                                .HasForeignKey("UboId");
                        });

                    b.OwnsOne("Sheaft.Domain.UboAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("UboId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Country")
                                .HasColumnType("int");

                            b1.Property<string>("Line1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Line2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Zipcode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UboId");

                            b1.ToTable("DeclarationUbos");

                            b1.WithOwner()
                                .HasForeignKey("UboId");
                        });

                    b.Navigation("Address");

                    b.Navigation("BirthPlace");
                });

            modelBuilder.Entity("Sheaft.Domain.User", b =>
                {
                    b.OwnsOne("Sheaft.Domain.UserAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Country")
                                .HasColumnType("int");

                            b1.Property<Guid>("DepartmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float");

                            b1.Property<string>("Line1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Line2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Point>("Location")
                                .HasColumnType("geography");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float");

                            b1.Property<string>("Zipcode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.HasIndex("DepartmentId");

                            b1.ToTable("Users");

                            b1.HasOne("Sheaft.Domain.Department", "Department")
                                .WithMany()
                                .HasForeignKey("DepartmentId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.Navigation("Department");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Sheaft.Domain.UserPoint", b =>
                {
                    b.HasOne("Sheaft.Domain.User", null)
                        .WithMany("Points")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sheaft.Domain.UserSetting", b =>
                {
                    b.HasOne("Sheaft.Domain.Setting", "Setting")
                        .WithMany()
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.User", null)
                        .WithMany("Settings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("Sheaft.Domain.Wallet", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sheaft.Domain.Withholding", b =>
                {
                    b.HasOne("Sheaft.Domain.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Wallet", "CreditedWallet")
                        .WithMany()
                        .HasForeignKey("CreditedWalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Wallet", "DebitedWallet")
                        .WithMany()
                        .HasForeignKey("DebitedWalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.Payout", "Payout")
                        .WithMany("Withholdings")
                        .HasForeignKey("PayoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");

                    b.Navigation("CreditedWallet");

                    b.Navigation("DebitedWallet");

                    b.Navigation("Payout");
                });

            modelBuilder.Entity("Sheaft.Domain.BusinessLegal", b =>
                {
                    b.HasOne("Sheaft.Domain.Declaration", "Declaration")
                        .WithOne()
                        .HasForeignKey("Sheaft.Domain.BusinessLegal", "DeclarationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Sheaft.Domain.LegalAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("BusinessLegalId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Country")
                                .HasColumnType("int");

                            b1.Property<string>("Line1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Line2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Zipcode")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("RowVersion");

                            b1.HasKey("BusinessLegalId");

                            b1.ToTable("Legals");

                            b1.WithOwner()
                                .HasForeignKey("BusinessLegalId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Declaration");
                });

            modelBuilder.Entity("Sheaft.Domain.PayinRefund", b =>
                {
                    b.HasOne("Sheaft.Domain.Payin", "Payin")
                        .WithMany("Refunds")
                        .HasForeignKey("PayinId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sheaft.Domain.PurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Payin");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("Sheaft.Domain.Catalog", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Sheaft.Domain.Declaration", b =>
                {
                    b.Navigation("Ubos");
                });

            modelBuilder.Entity("Sheaft.Domain.DeliveryBatch", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Sheaft.Domain.DeliveryMode", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("Closings");

                    b.Navigation("DeliveryHours");
                });

            modelBuilder.Entity("Sheaft.Domain.Document", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Sheaft.Domain.Legal", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Sheaft.Domain.Level", b =>
                {
                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("Sheaft.Domain.Order", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Products");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("Sheaft.Domain.Payin", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("Sheaft.Domain.Payout", b =>
                {
                    b.Navigation("Transfers");

                    b.Navigation("Withholdings");
                });

            modelBuilder.Entity("Sheaft.Domain.Product", b =>
                {
                    b.Navigation("CatalogsPrices");

                    b.Navigation("Pictures");

                    b.Navigation("Ratings");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Sheaft.Domain.PurchaseOrder", b =>
                {
                    b.Navigation("Delivery");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Sheaft.Domain.QuickOrder", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Sheaft.Domain.User", b =>
                {
                    b.Navigation("Legal");

                    b.Navigation("Pictures");

                    b.Navigation("Points");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Sheaft.Domain.Business", b =>
                {
                    b.Navigation("Closings");
                });

            modelBuilder.Entity("Sheaft.Domain.Producer", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Sheaft.Domain.Store", b =>
                {
                    b.Navigation("OpeningHours");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
